/* tslint:disable */
/* eslint-disable */
/**
 * Cashfree Payment Gateway APIs
 * Cashfree\'s Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setApiKeyToObject, setApiKeyToObjectWithConfiguration, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import { CFEnvironment } from './configuration';
import * as Sentry from "@sentry/node";
import * as crypto from "crypto";
export const ApiErrorTypeEnum = {
    API_ERROR: 'api_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const ApiError404TypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const ApiError409TypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const ApiError502TypeEnum = {
    API_ERROR: 'api_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const AppProviderEnum = {
    GPAY: 'gpay',
    PHONEPE: 'phonepe',
    OLA: 'ola',
    PAYTM: 'paytm',
    AMAZON: 'amazon',
    AIRTEL: 'airtel',
    FREECHARGE: 'freecharge',
    MOBIKWIK: 'mobikwik',
    JIO: 'jio',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const AuthorizationInPaymentsEntityActionEnum = {
    CAPTURE: 'CAPTURE',
    VOID: 'VOID',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const AuthorizationInPaymentsEntityStatusEnum = {
    SUCCESS: 'SUCCESS',
    PENDING: 'PENDING',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const AuthorizeOrderRequestActionEnum = {
    CAPTURE: 'CAPTURE',
    VOID: 'VOID',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const BadRequestErrorTypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CardChannelEnum = {
    LINK: 'link',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CardTokenTypeEnum = {
    ISSUER_TOKEN: 'ISSUER_TOKEN',
    NETWORK_GC_TOKEN: 'NETWORK_GC_TOKEN',
    ISSUER_GC_TOKEN: 'ISSUER_GC_TOKEN',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CardCardBankNameEnum = {
    KOTAK: 'Kotak',
    ICICI: 'ICICI',
    RBL: 'RBL',
    BOB: 'BOB',
    STANDARD_CHARTERED: 'Standard Chartered',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CardEMICardBankNameEnum = {
    HDFC: 'hdfc',
    KOTAK: 'kotak',
    ICICI: 'icici',
    RBL: 'rbl',
    BOB: 'bob',
    STANDARD_CHARTERED: 'standard chartered',
    AXIS: 'axis',
    AU: 'au',
    YES: 'yes',
    SBI: 'sbi',
    FED: 'fed',
    HSBC: 'hsbc',
    CITI: 'citi',
    AMEX: 'amex',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CardlessEMIProviderEnum = {
    FLEXMONEY: 'flexmoney',
    ZESTMONEY: 'zestmoney',
    HDFC: 'hdfc',
    ICICI: 'icici',
    CASHE: 'cashe',
    IDFC: 'idfc',
    KOTAK: 'kotak',
    SNAPMINT: 'snapmint',
    BHARATX: 'bharatx',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CashbackDetailsCashbackTypeEnum = {
    FLAT: 'flat',
    PERCENTAGE: 'percentage',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const DiscountDetailsDiscountTypeEnum = {
    FLAT: 'flat',
    PERCENTAGE: 'percentage',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const DisputesEntityDisputeTypeEnum = {
    DISPUTE: 'DISPUTE',
    CHARGEBACK: 'CHARGEBACK',
    RETRIEVAL: 'RETRIEVAL',
    PRE_ARBITRATION: 'PRE_ARBITRATION',
    ARBITRATION: 'ARBITRATION',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const DisputesEntityDisputeStatusEnum = {
    DISPUTE_CREATED: 'DISPUTE_CREATED',
    DISPUTE_DOCS_RECEIVED: 'DISPUTE_DOCS_RECEIVED',
    DISPUTE_UNDER_REVIEW: 'DISPUTE_UNDER_REVIEW',
    DISPUTE_MERCHANT_WON: 'DISPUTE_MERCHANT_WON',
    DISPUTE_MERCHANT_LOST: 'DISPUTE_MERCHANT_LOST',
    DISPUTE_MERCHANT_ACCEPTED: 'DISPUTE_MERCHANT_ACCEPTED',
    DISPUTE_INSUFFICIENT_EVIDENCE: 'DISPUTE_INSUFFICIENT_EVIDENCE',
    CHARGEBACK_CREATED: 'CHARGEBACK_CREATED',
    CHARGEBACK_DOCS_RECEIVED: 'CHARGEBACK_DOCS_RECEIVED',
    CHARGEBACK_UNDER_REVIEW: 'CHARGEBACK_UNDER_REVIEW',
    CHARGEBACK_MERCHANT_WON: 'CHARGEBACK_MERCHANT_WON',
    CHARGEBACK_MERCHANT_LOST: 'CHARGEBACK_MERCHANT_LOST',
    CHARGEBACK_MERCHANT_ACCEPTED: 'CHARGEBACK_MERCHANT_ACCEPTED',
    CHARGEBACK_INSUFFICIENT_EVIDENCE: 'CHARGEBACK_INSUFFICIENT_EVIDENCE',
    RETRIEVAL_CREATED: 'RETRIEVAL_CREATED',
    RETRIEVAL_DOCS_RECEIVED: 'RETRIEVAL_DOCS_RECEIVED',
    RETRIEVAL_UNDER_REVIEW: 'RETRIEVAL_UNDER_REVIEW',
    RETRIEVAL_MERCHANT_WON: 'RETRIEVAL_MERCHANT_WON',
    RETRIEVAL_MERCHANT_LOST: 'RETRIEVAL_MERCHANT_LOST',
    RETRIEVAL_MERCHANT_ACCEPTED: 'RETRIEVAL_MERCHANT_ACCEPTED',
    RETRIEVAL_INSUFFICIENT_EVIDENCE: 'RETRIEVAL_INSUFFICIENT_EVIDENCE',
    PRE_ARBITRATION_CREATED: 'PRE_ARBITRATION_CREATED',
    PRE_ARBITRATION_DOCS_RECEIVED: 'PRE_ARBITRATION_DOCS_RECEIVED',
    PRE_ARBITRATION_UNDER_REVIEW: 'PRE_ARBITRATION_UNDER_REVIEW',
    PRE_ARBITRATION_MERCHANT_WON: 'PRE_ARBITRATION_MERCHANT_WON',
    PRE_ARBITRATION_MERCHANT_LOST: 'PRE_ARBITRATION_MERCHANT_LOST',
    PRE_ARBITRATION_MERCHANT_ACCEPTED: 'PRE_ARBITRATION_MERCHANT_ACCEPTED',
    PRE_ARBITRATION_INSUFFICIENT_EVIDENCE: 'PRE_ARBITRATION_INSUFFICIENT_EVIDENCE',
    ARBITRATION_CREATED: 'ARBITRATION_CREATED',
    ARBITRATION_DOCS_RECEIVED: 'ARBITRATION_DOCS_RECEIVED',
    ARBITRATION_UNDER_REVIEW: 'ARBITRATION_UNDER_REVIEW',
    ARBITRATION_MERCHANT_WON: 'ARBITRATION_MERCHANT_WON',
    ARBITRATION_MERCHANT_LOST: 'ARBITRATION_MERCHANT_LOST',
    ARBITRATION_MERCHANT_ACCEPTED: 'ARBITRATION_MERCHANT_ACCEPTED',
    ARBITRATION_INSUFFICIENT_EVIDENCE: 'ARBITRATION_INSUFFICIENT_EVIDENCE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const DisputesEntityMerchantAcceptedDisputeTypeEnum = {
    DISPUTE: 'DISPUTE',
    CHARGEBACK: 'CHARGEBACK',
    RETRIEVAL: 'RETRIEVAL',
    PRE_ARBITRATION: 'PRE_ARBITRATION',
    ARBITRATION: 'ARBITRATION',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const DisputesEntityMerchantAcceptedDisputeStatusEnum = {
    DISPUTE_CREATED: 'DISPUTE_CREATED',
    DISPUTE_DOCS_RECEIVED: 'DISPUTE_DOCS_RECEIVED',
    DISPUTE_UNDER_REVIEW: 'DISPUTE_UNDER_REVIEW',
    DISPUTE_MERCHANT_WON: 'DISPUTE_MERCHANT_WON',
    DISPUTE_MERCHANT_LOST: 'DISPUTE_MERCHANT_LOST',
    DISPUTE_MERCHANT_ACCEPTED: 'DISPUTE_MERCHANT_ACCEPTED',
    DISPUTE_INSUFFICIENT_EVIDENCE: 'DISPUTE_INSUFFICIENT_EVIDENCE',
    CHARGEBACK_CREATED: 'CHARGEBACK_CREATED',
    CHARGEBACK_DOCS_RECEIVED: 'CHARGEBACK_DOCS_RECEIVED',
    CHARGEBACK_UNDER_REVIEW: 'CHARGEBACK_UNDER_REVIEW',
    CHARGEBACK_MERCHANT_WON: 'CHARGEBACK_MERCHANT_WON',
    CHARGEBACK_MERCHANT_LOST: 'CHARGEBACK_MERCHANT_LOST',
    CHARGEBACK_MERCHANT_ACCEPTED: 'CHARGEBACK_MERCHANT_ACCEPTED',
    CHARGEBACK_INSUFFICIENT_EVIDENCE: 'CHARGEBACK_INSUFFICIENT_EVIDENCE',
    RETRIEVAL_CREATED: 'RETRIEVAL_CREATED',
    RETRIEVAL_DOCS_RECEIVED: 'RETRIEVAL_DOCS_RECEIVED',
    RETRIEVAL_UNDER_REVIEW: 'RETRIEVAL_UNDER_REVIEW',
    RETRIEVAL_MERCHANT_WON: 'RETRIEVAL_MERCHANT_WON',
    RETRIEVAL_MERCHANT_LOST: 'RETRIEVAL_MERCHANT_LOST',
    RETRIEVAL_MERCHANT_ACCEPTED: 'RETRIEVAL_MERCHANT_ACCEPTED',
    RETRIEVAL_INSUFFICIENT_EVIDENCE: 'RETRIEVAL_INSUFFICIENT_EVIDENCE',
    PRE_ARBITRATION_CREATED: 'PRE_ARBITRATION_CREATED',
    PRE_ARBITRATION_DOCS_RECEIVED: 'PRE_ARBITRATION_DOCS_RECEIVED',
    PRE_ARBITRATION_UNDER_REVIEW: 'PRE_ARBITRATION_UNDER_REVIEW',
    PRE_ARBITRATION_MERCHANT_WON: 'PRE_ARBITRATION_MERCHANT_WON',
    PRE_ARBITRATION_MERCHANT_LOST: 'PRE_ARBITRATION_MERCHANT_LOST',
    PRE_ARBITRATION_MERCHANT_ACCEPTED: 'PRE_ARBITRATION_MERCHANT_ACCEPTED',
    PRE_ARBITRATION_INSUFFICIENT_EVIDENCE: 'PRE_ARBITRATION_INSUFFICIENT_EVIDENCE',
    ARBITRATION_CREATED: 'ARBITRATION_CREATED',
    ARBITRATION_DOCS_RECEIVED: 'ARBITRATION_DOCS_RECEIVED',
    ARBITRATION_UNDER_REVIEW: 'ARBITRATION_UNDER_REVIEW',
    ARBITRATION_MERCHANT_WON: 'ARBITRATION_MERCHANT_WON',
    ARBITRATION_MERCHANT_LOST: 'ARBITRATION_MERCHANT_LOST',
    ARBITRATION_MERCHANT_ACCEPTED: 'ARBITRATION_MERCHANT_ACCEPTED',
    ARBITRATION_INSUFFICIENT_EVIDENCE: 'ARBITRATION_INSUFFICIENT_EVIDENCE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const EntitySimulationRequestPaymentStatusEnum = {
    SUCCESS: 'SUCCESS',
    FAILED: 'FAILED',
    PENDING: 'PENDING',
    USER_DROPPED: 'USER_DROPPED',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const IdempotencyErrorTypeEnum = {
    IDEMPOTENCY_ERROR: 'idempotency_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const InstrumentEntityInstrumentTypeEnum = {
    CARD: 'card',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const InstrumentEntityInstrumentStatusEnum = {
    ACTIVE: 'ACTIVE',
    INACTIVE: 'INACTIVE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const LinkCustomerDetailsEntityCustomerBankCodeEnum = {
    NUMBER_3003: 3003,
    NUMBER_3005: 3005,
    NUMBER_3006: 3006,
    NUMBER_3010: 3010,
    NUMBER_3012: 3012,
    NUMBER_3016: 3016,
    NUMBER_3019: 3019,
    NUMBER_3020: 3020,
    NUMBER_3021: 3021,
    NUMBER_3022: 3022,
    NUMBER_3023: 3023,
    NUMBER_3024: 3024,
    NUMBER_3026: 3026,
    NUMBER_3027: 3027,
    NUMBER_3028: 3028,
    NUMBER_3029: 3029,
    NUMBER_3030: 3030,
    NUMBER_3031: 3031,
    NUMBER_3032: 3032,
    NUMBER_3033: 3033,
    NUMBER_3038: 3038,
    NUMBER_3039: 3039,
    NUMBER_3040: 3040,
    NUMBER_3042: 3042,
    NUMBER_3044: 3044,
    NUMBER_3054: 3054,
    NUMBER_3055: 3055,
    NUMBER_3058: 3058,
    NUMBER_3086: 3086,
    NUMBER_3087: 3087,
    NUMBER_3088: 3088,
    NUMBER_3089: 3089,
    NUMBER_3090: 3090,
    NUMBER_3091: 3091,
    NUMBER_3092: 3092,
    NUMBER_3098: 3098,
    NUMBER_3115: 3115,
    NUMBER_3117: 3117,
    NUMBER_7001: 7001,
    NUMBER_unknown_default_open_api: 11184809
};
export const OfferDetailsOfferTypeEnum = {
    DISCOUNT: 'DISCOUNT',
    CASHBACK: 'CASHBACK',
    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',
    NO_COST_EMI: 'NO_COST_EMI',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OfferTncOfferTncTypeEnum = {
    TEXT: 'text',
    LINK: 'link',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
/**
 * Offer Type Object
 * @export
 * @enum {string}
 */
export const OfferType = {
    DISCOUNT: 'DISCOUNT',
    CASHBACK: 'CASHBACK',
    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',
    NO_COST_EMI: 'NO_COST_EMI',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OrderAuthenticateEntityActionEnum = {
    SUBMIT_OTP: 'SUBMIT_OTP',
    RESEND_OTP: 'RESEND_OTP',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OrderAuthenticateEntityAuthenticateStatusEnum = {
    FAILED: 'FAILED',
    SUCCESS: 'SUCCESS',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OrderAuthenticatePaymentRequestActionEnum = {
    SUBMIT_OTP: 'SUBMIT_OTP',
    RESEND_OTP: 'RESEND_OTP',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OrderCreateRefundRequestRefundSpeedEnum = {
    STANDARD: 'STANDARD',
    INSTANT: 'INSTANT',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const OrderDeliveryStatusStatusEnum = {
    AWAITING_PICKUP: 'AWAITING_PICKUP',
    CANCELLED: 'CANCELLED',
    SELF_FULFILLED: 'SELF_FULFILLED',
    PICKED_UP: 'PICKED_UP',
    SHIPPED: 'SHIPPED',
    IN_TRANSIT: 'IN_TRANSIT',
    DELAY_COURIER_COMPANY_ISSUES: 'DELAY_COURIER_COMPANY_ISSUES',
    DELAY_INCORRECT_ADDRESS: 'DELAY_INCORRECT_ADDRESS',
    DELAY_SELLER_ISSUES: 'DELAY_SELLER_ISSUES',
    REACHED_DESTINATION_HUB: 'REACHED_DESTINATION_HUB',
    OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
    DELIVERED: 'DELIVERED',
    POTENTIAL_RTO_DELIVERY_ATTEMPTED: 'POTENTIAL_RTO_DELIVERY_ATTEMPTED',
    RTO: 'RTO',
    LOST: 'LOST',
    DAMAGED: 'DAMAGED',
    UNTRACKABLE_404: 'UNTRACKABLE_404',
    MANUAL_INTERVENTION_BROKEN_URL: 'MANUAL_INTERVENTION_BROKEN_URL',
    ASSOCIATED_WITH_RETURN_PICKUP: 'ASSOCIATED_WITH_RETURN_PICKUP',
    UNSERVICEABLE: 'UNSERVICEABLE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const PayOrderEntityPaymentMethodEnum = {
    NETBANKING: 'netbanking',
    CARD: 'card',
    UPI: 'upi',
    APP: 'app',
    CARDLESS_EMI: 'cardless_emi',
    PAYLATER: 'paylater',
    BANKTRANSFER: 'banktransfer',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const PayOrderEntityChannelEnum = {
    LINK: 'link',
    COLLECT: 'collect',
    QRCODE: 'qrcode',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const PayOrderEntityActionEnum = {
    LINK: 'link',
    CUSTOM: 'custom',
    FORM: 'form',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const PaylaterProviderEnum = {
    KOTAK: 'kotak',
    FLEXIPAY: 'flexipay',
    ZESTMONEY: 'zestmoney',
    LAZYPAY: 'lazypay',
    OLAPOSTPAID: 'olapostpaid',
    SIMPL: 'simpl',
    FREECHARGEPAYLATER: 'freechargepaylater',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const PaymentEntityPaymentStatusEnum = {
    SUCCESS: 'SUCCESS',
    NOT_ATTEMPTED: 'NOT_ATTEMPTED',
    FAILED: 'FAILED',
    USER_DROPPED: 'USER_DROPPED',
    VOID: 'VOID',
    CANCELLED: 'CANCELLED',
    PENDING: 'PENDING',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const RateLimitErrorTypeEnum = {
    RATE_LIMIT_ERROR: 'rate_limit_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const RefundEntityEntityEnum = {
    REFUND: 'refund',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const RefundEntityRefundStatusEnum = {
    SUCCESS: 'SUCCESS',
    PENDING: 'PENDING',
    CANCELLED: 'CANCELLED',
    ONHOLD: 'ONHOLD',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const RefundEntityRefundTypeEnum = {
    PAYMENT_AUTO_REFUND: 'PAYMENT_AUTO_REFUND',
    MERCHANT_INITIATED: 'MERCHANT_INITIATED',
    UNRECONCILED_AUTO_REFUND: 'UNRECONCILED_AUTO_REFUND',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const SimulateRequestEntityEnum = {
    PAYMENTS: 'PAYMENTS',
    SUBS_PAYMENTS: 'SUBS_PAYMENTS',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const TerminalPaymentEntityPaymentStatusEnum = {
    SUCCESS: 'SUCCESS',
    NOT_ATTEMPTED: 'NOT_ATTEMPTED',
    FAILED: 'FAILED',
    USER_DROPPED: 'USER_DROPPED',
    VOID: 'VOID',
    CANCELLED: 'CANCELLED',
    PENDING: 'PENDING',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const UpiChannelEnum = {
    LINK: 'link',
    COLLECT: 'collect',
    QRCODE: 'qrcode',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
/**
 * CustomersApi - axios parameter creator
 * @export
 */
const CustomersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create Customer at Cashfree
         * @summary Create Customer at Cashfree
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateCustomer: (x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateCustomer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateCustomerRequest' is not null or undefined
            assertParamExists('pGCreateCustomer', 'CreateCustomerRequest', CreateCustomerRequest);
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCreateCustomerWithConfiguration: (cashfreeConfiguration, x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateCustomer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateCustomerRequest' is not null or undefined
            assertParamExists('pGCreateCustomer', 'CreateCustomerRequest', CreateCustomerRequest);
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
const CustomersApiFp = function (configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create Customer at Cashfree
         * @summary Create Customer at Cashfree
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCreateCustomerWithConfiguration(cashfreeConfiguration, x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateCustomerWithConfiguration(cashfreeConfiguration, x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create a pre-activated vpa for partner.
         * @summary Create Pre-Activated Vpas for partner
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreatePartnerVpaRequest} [CreatePartnerVpaRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * CreatePartnerVpaRequest?: CreatePartnerVpaRequest,
         */
        terminalCreateQRCodes: (x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('terminalCreateQRCodes', 'x_api_version', x_api_version);
            const localVarPath = `/partners/merchant/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreatePartnerVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        terminalCreateQRCodesWithConfiguration: (cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('terminalCreateQRCodes', 'x_api_version', x_api_version);
            const localVarPath = `/partners/merchant/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreatePartnerVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get a pre-activated vpa for partner.
         * @summary Get Pre-Activated Vpas for partner
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} status Status of pre-created Qr.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get pre-generated staticQRs.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        terminalGetQRCodes: (x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'x_api_version', x_api_version);
            // verify required parameter 'status' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'status', status);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/partners/merchant/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        terminalGetQRCodesWithConfiguration: (cashfreeConfiguration, x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'x_api_version', x_api_version);
            // verify required parameter 'status' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'status', status);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('terminalGetQRCodes', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/partners/merchant/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create a pre-activated vpa for partner.
         * @summary Create Pre-Activated Vpas for partner
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreatePartnerVpaRequest} [CreatePartnerVpaRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminalCreateQRCodes(x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.terminalCreateQRCodes(x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        terminalCreateQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.terminalCreateQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get a pre-activated vpa for partner.
         * @summary Get Pre-Activated Vpas for partner
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} status Status of pre-created Qr.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get pre-generated staticQRs.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminalGetQRCodes(x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.terminalGetQRCodes(x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        terminalGetQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.terminalGetQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
/**
 * DisputesApi - axios parameter creator
 * @export
 */
const DisputesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get accept the Dispute by specifying the Dispute ID.
         * @summary Accept Dispute by Dispute ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGAcceptDisputeByID: (x_api_version, dispute_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGAcceptDisputeByID', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGAcceptDisputeByID', 'dispute_id', dispute_id);
            const localVarPath = `/disputes/{dispute_id}/accept`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGAcceptDisputeByIDWithConfiguration: (cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGAcceptDisputeByID', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGAcceptDisputeByID', 'dispute_id', dispute_id);
            const localVarPath = `/disputes/{dispute_id}/accept`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get Dispute details by specifying the Dispute ID.
         * @summary Get Disputes by Dispute ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchDisputeByID: (x_api_version, dispute_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchDisputeByID', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGFetchDisputeByID', 'dispute_id', dispute_id);
            const localVarPath = `/disputes/{dispute_id}`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchDisputeByIDWithConfiguration: (cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchDisputeByID', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGFetchDisputeByID', 'dispute_id', dispute_id);
            const localVarPath = `/disputes/{dispute_id}`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get all Dispute details by specifying the Order ID.
         * @summary Get Disputes by Order Id
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOrderDisputes: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrderDisputes', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrderDisputes', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/disputes`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchOrderDisputesWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrderDisputes', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrderDisputes', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/disputes`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get all Dispute details by specifying the Payment ID.
         * @summary Get Disputes by Payment ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} cf_payment_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchPaymentDisputes: (x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchPaymentDisputes', 'x_api_version', x_api_version);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGFetchPaymentDisputes', 'cf_payment_id', cf_payment_id);
            const localVarPath = `/payments/{cf_payment_id}/disputes`
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchPaymentDisputesWithConfiguration: (cashfreeConfiguration, x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchPaymentDisputes', 'x_api_version', x_api_version);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGFetchPaymentDisputes', 'cf_payment_id', cf_payment_id);
            const localVarPath = `/payments/{cf_payment_id}/disputes`
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to Submit the Evidences to contest the Dispute by specifying the Dispute ID.
         * @summary Submit Evidence to contest the Dispute by Dispute ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} file File types supported are jpeg, jpg, png, pdf and maximum file size allowed is 20 MB.
         * @param {string} doc_type Mention the type of the document you are uploading. Possible values :- Delivery/Service Proof, Shipping Proof, Statement of Service, Proof of Service Used, Cancellation of Service Proof, Refund Proof, Business model explanation, Extra Charges Declaration, Terms &amp; Conditions, Customer Withdrawal Letter, Certificate of Authenticity, Reseller Agreement. You can use get evidences to contest dispute API to fetch set of documents required to contest particular dispute.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [note]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * doc_type: string,
         */
        pGUploadDisputesDocuments: (x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'dispute_id', dispute_id);
            // verify required parameter 'file' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'file', file);
            // verify required parameter 'doc_type' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'doc_type', doc_type);
            const localVarPath = `/disputes/{dispute_id}/documents`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (doc_type !== undefined) {
                localVarFormParams.append('doc_type', doc_type);
            }
            if (note !== undefined) {
                localVarFormParams.append('note', note);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGUploadDisputesDocumentsWithConfiguration: (cashfreeConfiguration, x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'x_api_version', x_api_version);
            // verify required parameter 'dispute_id' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'dispute_id', dispute_id);
            // verify required parameter 'file' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'file', file);
            // verify required parameter 'doc_type' is not null or undefined
            assertParamExists('pGUploadDisputesDocuments', 'doc_type', doc_type);
            const localVarPath = `/disputes/{dispute_id}/documents`
                .replace(`{${"dispute_id"}}`, encodeURIComponent(String(dispute_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (doc_type !== undefined) {
                localVarFormParams.append('doc_type', doc_type);
            }
            if (note !== undefined) {
                localVarFormParams.append('note', note);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DisputesApi - functional programming interface
 * @export
 */
const DisputesApiFp = function (configuration) {
    const localVarAxiosParamCreator = DisputesApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get accept the Dispute by specifying the Dispute ID.
         * @summary Accept Dispute by Dispute ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGAcceptDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAcceptDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGAcceptDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAcceptDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get Dispute details by specifying the Dispute ID.
         * @summary Get Disputes by Dispute ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get all Dispute details by specifying the Order ID.
         * @summary Get Disputes by Order Id
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOrderDisputes(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrderDisputes(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchOrderDisputesWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrderDisputesWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get all Dispute details by specifying the Payment ID.
         * @summary Get Disputes by Payment ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} cf_payment_id
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchPaymentDisputes(x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchPaymentDisputes(x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchPaymentDisputesWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchPaymentDisputesWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to Submit the Evidences to contest the Dispute by specifying the Dispute ID.
         * @summary Submit Evidence to contest the Dispute by Dispute ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} dispute_id
         * @param {string} file File types supported are jpeg, jpg, png, pdf and maximum file size allowed is 20 MB.
         * @param {string} doc_type Mention the type of the document you are uploading. Possible values :- Delivery/Service Proof, Shipping Proof, Statement of Service, Proof of Service Used, Cancellation of Service Proof, Refund Proof, Business model explanation, Extra Charges Declaration, Terms &amp; Conditions, Customer Withdrawal Letter, Certificate of Authenticity, Reseller Agreement. You can use get evidences to contest dispute API to fetch set of documents required to contest particular dispute.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [note]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGUploadDisputesDocuments(x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGUploadDisputesDocuments(x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGUploadDisputesDocumentsWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGUploadDisputesDocumentsWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * DisputesApi - object-oriented interface
 * @export
 * @class DisputesApi
 * @extends {BaseAPI}
 */
/**
 * EasySplitApi - axios parameter creator
 * @export
 */
const EasySplitApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The Create Adjustment API will create a adjustment request either from vendor to the merchant or from merchant to the vendor.
         * @summary Create Adjustment
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {VendorAdjustmentRequest} [VendorAdjustmentRequest] Vendor Adjustment Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESCreateAdjustment: (x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateAdjustment', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESCreateAdjustment', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/adjustment`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(VendorAdjustmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESCreateAdjustmentWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateAdjustment', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESCreateAdjustment', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/adjustment`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(VendorAdjustmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.
         * @summary Create On Demand Transfer
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESCreateOnDemandTransfer: (x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateOnDemandTransfer', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESCreateOnDemandTransfer', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/transfer`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(AdjustVendorBalanceRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESCreateOnDemandTransferWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateOnDemandTransfer', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESCreateOnDemandTransfer', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/transfer`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(AdjustVendorBalanceRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.
         * @summary Create vendor
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * CreateVendorRequest?: CreateVendorRequest,
         */
        pGESCreateVendors: (x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateVendors', 'x_api_version', x_api_version);
            const localVarPath = `/easy-split/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateVendorRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESCreateVendorsWithConfiguration: (cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESCreateVendors', 'x_api_version', x_api_version);
            const localVarPath = `/easy-split/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateVendorRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.
         * @summary Download Vendor Documents
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGESDownloadVendorsDocs: (x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'doc_type' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'doc_type', doc_type);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}/download/{doc_type}`
                .replace(`{${"doc_type"}}`, encodeURIComponent(String(doc_type)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESDownloadVendorsDocsWithConfiguration: (cashfreeConfiguration, x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'doc_type' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'doc_type', doc_type);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESDownloadVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}/download/{doc_type}`
                .replace(`{${"doc_type"}}`, encodeURIComponent(String(doc_type)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get the details of a specific vendor associated with your Easy Split account.
         * @summary Get Vendor All Details
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESFetchVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESFetchVendors', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESFetchVendors', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESFetchVendorsWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESFetchVendors', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESFetchVendors', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.
         * @summary Get On Demand Balance
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESGetVendorBalance: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorBalance', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESGetVendorBalance', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/balances`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESGetVendorBalanceWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorBalance', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESGetVendorBalance', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}/balances`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.
         * @summary Get Vendor Balance Transfer Charges
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.
         * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGESGetVendorBalanceTransferCharges: (x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'x_api_version', x_api_version);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'amount', amount);
            // verify required parameter 'rate_type' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'rate_type', rate_type);
            const localVarPath = `/easy-split/amount/{amount}/charges`
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (rate_type !== undefined) {
                localVarQueryParameter['rate_type'] = rate_type;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESGetVendorBalanceTransferChargesWithConfiguration: (cashfreeConfiguration, x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'x_api_version', x_api_version);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'amount', amount);
            // verify required parameter 'rate_type' is not null or undefined
            assertParamExists('pGESGetVendorBalanceTransferCharges', 'rate_type', rate_type);
            const localVarPath = `/easy-split/amount/{amount}/charges`
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (rate_type !== undefined) {
                localVarQueryParameter['rate_type'] = rate_type;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch the details of all the KYC details of a particular vendor.
         * @summary Get Vendor All Documents Status
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESGetVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESGetVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESGetVendorsDocsWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESGetVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESGetVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
         * @summary Get Split and Settlement Details by OrderID v2.0
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * ESOrderReconRequest?: ESOrderReconRequest,
         */
        pGESOrderRecon: (x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESOrderRecon', 'x_api_version', x_api_version);
            const localVarPath = `/split/order/vendor/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ESOrderReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESOrderReconWithConfiguration: (cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESOrderRecon', 'x_api_version', x_api_version);
            const localVarPath = `/split/order/vendor/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ESOrderReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.
         * @summary Update vendor Details
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESUpdateVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESUpdateVendors', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESUpdateVendors', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateVendorRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESUpdateVendorsWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESUpdateVendors', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESUpdateVendors', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendors/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateVendorRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to upload KYC documents of a specific vendor.
         * @summary Upload Vendor Docs
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.
         * @param {string} [doc_value] Enter the display name of the uploaded file.
         * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGESUploadVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESUploadVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESUploadVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (doc_type !== undefined) {
                localVarFormParams.append('doc_type', doc_type);
            }
            if (doc_value !== undefined) {
                localVarFormParams.append('doc_value', doc_value);
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGESUploadVendorsDocsWithConfiguration: (cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGESUploadVendorsDocs', 'x_api_version', x_api_version);
            // verify required parameter 'vendor_id' is not null or undefined
            assertParamExists('pGESUploadVendorsDocs', 'vendor_id', vendor_id);
            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendor_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (doc_type !== undefined) {
                localVarFormParams.append('doc_type', doc_type);
            }
            if (doc_value !== undefined) {
                localVarFormParams.append('doc_value', doc_value);
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Split After Payment API splits the payments to vendors after successful payment from the customers.
         * @summary Split After Payment
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderSplitAfterPayment: (x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderSplitAfterPayment', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderSplitAfterPayment', 'order_id', order_id);
            const localVarPath = `/easy-split/orders/{order_id}/split`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SplitAfterPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderSplitAfterPaymentWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderSplitAfterPayment', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderSplitAfterPayment', 'order_id', order_id);
            const localVarPath = `/easy-split/orders/{order_id}/split`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SplitAfterPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.
         * @summary Create Static Split Configuration
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {StaticSplitRequest} [StaticSplitRequest] Static Split
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * StaticSplitRequest?: StaticSplitRequest,
         */
        pGOrderStaticSplit: (x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderStaticSplit', 'x_api_version', x_api_version);
            const localVarPath = `/easy-split/static-split`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(StaticSplitRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderStaticSplitWithConfiguration: (cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderStaticSplit', 'x_api_version', x_api_version);
            const localVarPath = `/easy-split/static-split`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(StaticSplitRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
         * @summary Get Split and Settlement Details by OrderID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGSplitOrderRecon: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSplitOrderRecon', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGSplitOrderRecon', 'order_id', order_id);
            const localVarPath = `/easy-split/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGSplitOrderReconWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSplitOrderRecon', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGSplitOrderRecon', 'order_id', order_id);
            const localVarPath = `/easy-split/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EasySplitApi - functional programming interface
 * @export
 */
const EasySplitApiFp = function (configuration) {
    const localVarAxiosParamCreator = EasySplitApiAxiosParamCreator(configuration);
    return {
        /**
         * The Create Adjustment API will create a adjustment request either from vendor to the merchant or from merchant to the vendor.
         * @summary Create Adjustment
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {VendorAdjustmentRequest} [VendorAdjustmentRequest] Vendor Adjustment Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESCreateAdjustment(x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateAdjustment(x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESCreateAdjustmentWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateAdjustmentWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.
         * @summary Create On Demand Transfer
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESCreateOnDemandTransferWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateOnDemandTransferWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.
         * @summary Create vendor
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESCreateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.
         * @summary Download Vendor Documents
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESDownloadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESDownloadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get the details of a specific vendor associated with your Easy Split account.
         * @summary Get Vendor All Details
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESFetchVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESFetchVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.
         * @summary Get On Demand Balance
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESGetVendorBalanceWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalanceWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.
         * @summary Get Vendor Balance Transfer Charges
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.
         * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESGetVendorBalanceTransferChargesWithConfiguration(cashfreeConfiguration, x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalanceTransferChargesWithConfiguration(cashfreeConfiguration, x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch the details of all the KYC details of a particular vendor.
         * @summary Get Vendor All Documents Status
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESGetVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
         * @summary Get Split and Settlement Details by OrderID v2.0
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.
         * @summary Update vendor Details
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESUpdateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUpdateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to upload KYC documents of a specific vendor.
         * @summary Upload Vendor Docs
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} vendor_id The id which uniquely identifies your vendor.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.
         * @param {string} [doc_value] Enter the display name of the uploaded file.
         * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGESUploadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUploadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Split After Payment API splits the payments to vendors after successful payment from the customers.
         * @summary Split After Payment
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderSplitAfterPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderSplitAfterPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.
         * @summary Create Static Split Configuration
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {StaticSplitRequest} [StaticSplitRequest] Static Split
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderStaticSplitWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderStaticSplitWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
         * @summary Get Split and Settlement Details by OrderID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGSplitOrderRecon(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSplitOrderRecon(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGSplitOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSplitOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * EasySplitApi - object-oriented interface
 * @export
 * @class EasySplitApi
 * @extends {BaseAPI}
 */
/**
 * EligibilityApi - axios parameter creator
 * @export
 */
const EligibilityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchCardlessEMI: (x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchCardlessEMI', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchCardlessEMIRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchCardlessEMI', 'EligibilityFetchCardlessEMIRequest', EligibilityFetchCardlessEMIRequest);
            const localVarPath = `/eligibility/cardlessemi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchCardlessEMIRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGEligibilityFetchCardlessEMIWithConfiguration: (cashfreeConfiguration, x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchCardlessEMI', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchCardlessEMIRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchCardlessEMI', 'EligibilityFetchCardlessEMIRequest', EligibilityFetchCardlessEMIRequest);
            const localVarPath = `/eligibility/cardlessemi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchCardlessEMIRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible offers for an order_id or order amount.
         * @summary Get Eligible Offers for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchOffers: (x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchOffers', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchOffersRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchOffers', 'EligibilityFetchOffersRequest', EligibilityFetchOffersRequest);
            const localVarPath = `/eligibility/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchOffersRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGEligibilityFetchOffersWithConfiguration: (cashfreeConfiguration, x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchOffers', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchOffersRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchOffers', 'EligibilityFetchOffersRequest', EligibilityFetchOffersRequest);
            const localVarPath = `/eligibility/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchOffersRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible Paylater Payment Methods for a customer on an order.
         * @summary Get Eligible Paylater for a customer on an order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchPaylater: (x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchPaylater', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaylaterRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchPaylater', 'EligibilityFetchPaylaterRequest', EligibilityFetchPaylaterRequest);
            const localVarPath = `/eligibility/paylater`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaylaterRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGEligibilityFetchPaylaterWithConfiguration: (cashfreeConfiguration, x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchPaylater', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaylaterRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchPaylater', 'EligibilityFetchPaylaterRequest', EligibilityFetchPaylaterRequest);
            const localVarPath = `/eligibility/paylater`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaylaterRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible Payment Methods
         * @summary Get eligible Payment Methods
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchPaymentMethods: (x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchPaymentMethods', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaymentMethodsRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchPaymentMethods', 'EligibilityFetchPaymentMethodsRequest', EligibilityFetchPaymentMethodsRequest);
            const localVarPath = `/eligibility/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaymentMethodsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGEligibilityFetchPaymentMethodsWithConfiguration: (cashfreeConfiguration, x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGEligibilityFetchPaymentMethods', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaymentMethodsRequest' is not null or undefined
            assertParamExists('pGEligibilityFetchPaymentMethods', 'EligibilityFetchPaymentMethodsRequest', EligibilityFetchPaymentMethodsRequest);
            const localVarPath = `/eligibility/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaymentMethodsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EligibilityApi - functional programming interface
 * @export
 */
const EligibilityApiFp = function (configuration) {
    const localVarAxiosParamCreator = EligibilityApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGEligibilityFetchCardlessEMIWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchCardlessEMIWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get eligible offers for an order_id or order amount.
         * @summary Get Eligible Offers for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGEligibilityFetchOffersWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchOffersWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get eligible Paylater Payment Methods for a customer on an order.
         * @summary Get Eligible Paylater for a customer on an order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGEligibilityFetchPaylaterWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaylaterWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get eligible Payment Methods
         * @summary Get eligible Payment Methods
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGEligibilityFetchPaymentMethodsWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaymentMethodsWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * EligibilityApi - object-oriented interface
 * @export
 * @class EligibilityApi
 * @extends {BaseAPI}
 */
/**
 * OffersApi - axios parameter creator
 * @export
 */
const OffersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create offers with Cashfree from your backend
         * @summary Create Offer
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateOffer: (x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateOffer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOfferRequest' is not null or undefined
            assertParamExists('pGCreateOffer', 'CreateOfferRequest', CreateOfferRequest);
            const localVarPath = `/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOfferRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCreateOfferWithConfiguration: (cashfreeConfiguration, x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateOffer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOfferRequest' is not null or undefined
            assertParamExists('pGCreateOffer', 'CreateOfferRequest', CreateOfferRequest);
            const localVarPath = `/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOfferRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get offer by offer_id
         * @summary Get Offer by ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} offer_id The offer ID for which you want to view the offer details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOffer: (x_api_version, offer_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOffer', 'x_api_version', x_api_version);
            // verify required parameter 'offer_id' is not null or undefined
            assertParamExists('pGFetchOffer', 'offer_id', offer_id);
            const localVarPath = `/offers/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchOfferWithConfiguration: (cashfreeConfiguration, x_api_version, offer_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOffer', 'x_api_version', x_api_version);
            // verify required parameter 'offer_id' is not null or undefined
            assertParamExists('pGFetchOffer', 'offer_id', offer_id);
            const localVarPath = `/offers/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OffersApi - functional programming interface
 * @export
 */
const OffersApiFp = function (configuration) {
    const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create offers with Cashfree from your backend
         * @summary Create Offer
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCreateOfferWithConfiguration(cashfreeConfiguration, x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOfferWithConfiguration(cashfreeConfiguration, x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get offer by offer_id
         * @summary Get Offer by ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} offer_id The offer ID for which you want to view the offer details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchOfferWithConfiguration(cashfreeConfiguration, x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOfferWithConfiguration(cashfreeConfiguration, x_api_version, offer_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
/**
 * OrdersApi - axios parameter creator
 * @export
 */
const OrdersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
         * @summary Create Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateOrder: (x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOrderRequest' is not null or undefined
            assertParamExists('pGCreateOrder', 'CreateOrderRequest', CreateOrderRequest);
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCreateOrderWithConfiguration: (cashfreeConfiguration, x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOrderRequest' is not null or undefined
            assertParamExists('pGCreateOrder', 'CreateOrderRequest', CreateOrderRequest);
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOrder: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrder', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchOrderWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrder', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch the order related data like address,cart,offers,customer details etc using the Cashfree\'s `order_id`. ## When to use this API - To get the extended data associated with order. - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order Extended
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOrderExtendedData: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrderExtendedData', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrderExtendedData', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/extended`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchOrderExtendedDataWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchOrderExtendedData', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGFetchOrderExtendedData', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/extended`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
         * @summary Terminate Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGTerminateOrder: (x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGTerminateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGTerminateOrder', 'order_id', order_id);
            // verify required parameter 'TerminateOrderRequest' is not null or undefined
            assertParamExists('pGTerminateOrder', 'TerminateOrderRequest', TerminateOrderRequest);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(TerminateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGTerminateOrderWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGTerminateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGTerminateOrder', 'order_id', order_id);
            // verify required parameter 'TerminateOrderRequest' is not null or undefined
            assertParamExists('pGTerminateOrder', 'TerminateOrderRequest', TerminateOrderRequest);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(TerminateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this api to update the order related data like shipment details,order delivery status etc. ## When to use this API - To provide/update the shipment details or order delivery status. - Once the order is PAID.
         * @summary Update Order Extended
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {UpdateOrderExtendedRequest} UpdateOrderExtendedRequest Request Body to Update extended data related to order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGUpdateOrderExtendedData: (x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'order_id', order_id);
            // verify required parameter 'UpdateOrderExtendedRequest' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'UpdateOrderExtendedRequest', UpdateOrderExtendedRequest);
            const localVarPath = `/orders/{order_id}/extended`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateOrderExtendedRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGUpdateOrderExtendedDataWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'order_id', order_id);
            // verify required parameter 'UpdateOrderExtendedRequest' is not null or undefined
            assertParamExists('pGUpdateOrderExtendedData', 'UpdateOrderExtendedRequest', UpdateOrderExtendedRequest);
            const localVarPath = `/orders/{order_id}/extended`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateOrderExtendedRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
const OrdersApiFp = function (configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
    return {
        /**
         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
         * @summary Create Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCreateOrderWithConfiguration(cashfreeConfiguration, x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOrderWithConfiguration(cashfreeConfiguration, x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch the order related data like address,cart,offers,customer details etc using the Cashfree\'s `order_id`. ## When to use this API - To get the extended data associated with order. - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order Extended
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOrderExtendedData(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrderExtendedData(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
         * @summary Terminate Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGTerminateOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGTerminateOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this api to update the order related data like shipment details,order delivery status etc. ## When to use this API - To provide/update the shipment details or order delivery status. - Once the order is PAID.
         * @summary Update Order Extended
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {UpdateOrderExtendedRequest} UpdateOrderExtendedRequest Request Body to Update extended data related to order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGUpdateOrderExtendedData(x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGUpdateOrderExtendedData(x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGUpdateOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGUpdateOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
/**
 * PGReconciliationApi - axios parameter creator
 * @export
 */
const PGReconciliationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
         * @summary PG Reconciliation
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGFetchRecon: (x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'FetchReconRequest' is not null or undefined
            assertParamExists('pGFetchRecon', 'FetchReconRequest', FetchReconRequest);
            const localVarPath = `/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchReconWithConfiguration: (cashfreeConfiguration, x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'FetchReconRequest' is not null or undefined
            assertParamExists('pGFetchRecon', 'FetchReconRequest', FetchReconRequest);
            const localVarPath = `/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PGReconciliationApi - functional programming interface
 * @export
 */
const PGReconciliationApiFp = function (configuration) {
    const localVarAxiosParamCreator = PGReconciliationApiAxiosParamCreator(configuration);
    return {
        /**
         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
         * @summary PG Reconciliation
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * PGReconciliationApi - object-oriented interface
 * @export
 * @class PGReconciliationApi
 * @extends {BaseAPI}
 */
/**
 * PaymentLinksApi - axios parameter creator
 * @export
 */
const PaymentLinksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
         * @summary Cancel Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCancelLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCancelLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGCancelLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/cancel`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCancelLinkWithConfiguration: (cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCancelLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGCancelLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/cancel`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
         * @summary Create Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateLink: (x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateLink', 'x_api_version', x_api_version);
            // verify required parameter 'CreateLinkRequest' is not null or undefined
            assertParamExists('pGCreateLink', 'CreateLinkRequest', CreateLinkRequest);
            const localVarPath = `/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateLinkRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCreateLinkWithConfiguration: (cashfreeConfiguration, x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCreateLink', 'x_api_version', x_api_version);
            // verify required parameter 'CreateLinkRequest' is not null or undefined
            assertParamExists('pGCreateLink', 'CreateLinkRequest', CreateLinkRequest);
            const localVarPath = `/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateLinkRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all details and status of a payment link.
         * @summary Fetch Payment Link Details
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGFetchLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchLinkWithConfiguration: (cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGFetchLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all order details for a payment link.
         * @summary Get Orders for a Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [status] Mention What is status of orders you want to fetch, default is PAID. Possible value: ALL, PAID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGLinkFetchOrders: (x_api_version, link_id, x_request_id, x_idempotency_key, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGLinkFetchOrders', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGLinkFetchOrders', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/orders`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGLinkFetchOrdersWithConfiguration: (cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGLinkFetchOrders', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            assertParamExists('pGLinkFetchOrders', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/orders`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentLinksApi - functional programming interface
 * @export
 */
const PaymentLinksApiFp = function (configuration) {
    const localVarAxiosParamCreator = PaymentLinksApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
         * @summary Cancel Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCancelLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCancelLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
         * @summary Create Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCreateLinkWithConfiguration(cashfreeConfiguration, x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateLinkWithConfiguration(cashfreeConfiguration, x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view all details and status of a payment link.
         * @summary Fetch Payment Link Details
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view all order details for a payment link.
         * @summary Get Orders for a Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [status] Mention What is status of orders you want to fetch, default is PAID. Possible value: ALL, PAID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, status, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGLinkFetchOrdersWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGLinkFetchOrdersWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, status, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * PaymentLinksApi - object-oriented interface
 * @export
 * @class PaymentLinksApi
 * @extends {BaseAPI}
 */
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
const PaymentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to capture or void a preauthorized payment
         * @summary Preauthorization
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGAuthorizeOrder: (x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'order_id', order_id);
            // verify required parameter 'AuthorizeOrderRequest' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'AuthorizeOrderRequest', AuthorizeOrderRequest);
            const localVarPath = `/orders/{order_id}/authorization`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(AuthorizeOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGAuthorizeOrderWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'order_id', order_id);
            // verify required parameter 'AuthorizeOrderRequest' is not null or undefined
            assertParamExists('pGAuthorizeOrder', 'AuthorizeOrderRequest', AuthorizeOrderRequest);
            const localVarPath = `/orders/{order_id}/authorization`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(AuthorizeOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
         * @summary Submit or Resend OTP
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderAuthenticatePayment: (x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'cf_payment_id', cf_payment_id);
            // verify required parameter 'OrderAuthenticatePaymentRequest' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'OrderAuthenticatePaymentRequest', OrderAuthenticatePaymentRequest);
            const localVarPath = `/orders/pay/authenticate/{cf_payment_id}`
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OrderAuthenticatePaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderAuthenticatePaymentWithConfiguration: (cashfreeConfiguration, x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'cf_payment_id', cf_payment_id);
            // verify required parameter 'OrderAuthenticatePaymentRequest' is not null or undefined
            assertParamExists('pGOrderAuthenticatePayment', 'OrderAuthenticatePaymentRequest', OrderAuthenticatePaymentRequest);
            const localVarPath = `/orders/pay/authenticate/{cf_payment_id}`
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OrderAuthenticatePaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view payment details of an order for a payment ID.
         * @summary Get Payment by ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderFetchPayment: (x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'order_id', order_id);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'cf_payment_id', cf_payment_id);
            const localVarPath = `/orders/{order_id}/payments/{cf_payment_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderFetchPaymentWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'order_id', order_id);
            // verify required parameter 'cf_payment_id' is not null or undefined
            assertParamExists('pGOrderFetchPayment', 'cf_payment_id', cf_payment_id);
            const localVarPath = `/orders/{order_id}/payments/{cf_payment_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all payment details for an order.
         * @summary Get Payments for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchPayments: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchPayments', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchPayments', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/payments`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderFetchPaymentsWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchPayments', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchPayments', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/payments`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
         * @summary Order Pay
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGPayOrder: (x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGPayOrder', 'x_api_version', x_api_version);
            // verify required parameter 'PayOrderRequest' is not null or undefined
            assertParamExists('pGPayOrder', 'PayOrderRequest', PayOrderRequest);
            const localVarPath = `/orders/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PayOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGPayOrderWithConfiguration: (cashfreeConfiguration, x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGPayOrder', 'x_api_version', x_api_version);
            // verify required parameter 'PayOrderRequest' is not null or undefined
            assertParamExists('pGPayOrder', 'PayOrderRequest', PayOrderRequest);
            const localVarPath = `/orders/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PayOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
const PaymentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to capture or void a preauthorized payment
         * @summary Preauthorization
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGAuthorizeOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAuthorizeOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
         * @summary Submit or Resend OTP
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderAuthenticatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderAuthenticatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view payment details of an order for a payment ID.
         * @summary Get Payment by ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderFetchPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view all payment details for an order.
         * @summary Get Payments for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderFetchPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
         * @summary Order Pay
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGPayOrderWithConfiguration(cashfreeConfiguration, x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGPayOrderWithConfiguration(cashfreeConfiguration, x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
/**
 * RefundsApi - axios parameter creator
 * @export
 */
const RefundsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to initiate refunds.
         * @summary Create Refund
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderCreateRefund: (x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'order_id', order_id);
            // verify required parameter 'OrderCreateRefundRequest' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'OrderCreateRefundRequest', OrderCreateRefundRequest);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OrderCreateRefundRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderCreateRefundWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'order_id', order_id);
            // verify required parameter 'OrderCreateRefundRequest' is not null or undefined
            assertParamExists('pGOrderCreateRefund', 'OrderCreateRefundRequest', OrderCreateRefundRequest);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OrderCreateRefundRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch a specific refund processed on your Cashfree Account.
         * @summary Get Refund
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} refund_id Refund Id of the refund you want to fetch.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderFetchRefund: (x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'order_id', order_id);
            // verify required parameter 'refund_id' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'refund_id', refund_id);
            const localVarPath = `/orders/{order_id}/refunds/{refund_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refund_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderFetchRefundWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'order_id', order_id);
            // verify required parameter 'refund_id' is not null or undefined
            assertParamExists('pGOrderFetchRefund', 'refund_id', refund_id);
            const localVarPath = `/orders/{order_id}/refunds/{refund_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refund_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch all refunds processed against an order.
         * @summary Get All Refunds for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchRefunds: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchRefunds', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchRefunds', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderFetchRefundsWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchRefunds', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchRefunds', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
const RefundsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to initiate refunds.
         * @summary Create Refund
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch a specific refund processed on your Cashfree Account.
         * @summary Get Refund
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} refund_id Refund Id of the refund you want to fetch.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderFetchRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch all refunds processed against an order.
         * @summary Get All Refunds for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderFetchRefundsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefundsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
/**
 * SettlementReconciliationApi - axios parameter creator
 * @export
 */
const SettlementReconciliationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
         * @summary Get All Settlements
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGFetchSettlements: (x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchSettlements', 'x_api_version', x_api_version);
            // verify required parameter 'FetchSettlementsRequest' is not null or undefined
            assertParamExists('pGFetchSettlements', 'FetchSettlementsRequest', FetchSettlementsRequest);
            const localVarPath = `/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FetchSettlementsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchSettlementsWithConfiguration: (cashfreeConfiguration, x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchSettlements', 'x_api_version', x_api_version);
            // verify required parameter 'FetchSettlementsRequest' is not null or undefined
            assertParamExists('pGFetchSettlements', 'FetchSettlementsRequest', FetchSettlementsRequest);
            const localVarPath = `/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(FetchSettlementsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
         * @summary Settlement Reconciliation
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGSettlementFetchRecon: (x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSettlementFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'SettlementFetchReconRequest' is not null or undefined
            assertParamExists('pGSettlementFetchRecon', 'SettlementFetchReconRequest', SettlementFetchReconRequest);
            const localVarPath = `/settlement/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SettlementFetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGSettlementFetchReconWithConfiguration: (cashfreeConfiguration, x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSettlementFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'SettlementFetchReconRequest' is not null or undefined
            assertParamExists('pGSettlementFetchRecon', 'SettlementFetchReconRequest', SettlementFetchReconRequest);
            const localVarPath = `/settlement/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SettlementFetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SettlementReconciliationApi - functional programming interface
 * @export
 */
const SettlementReconciliationApiFp = function (configuration) {
    const localVarAxiosParamCreator = SettlementReconciliationApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
         * @summary Get All Settlements
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchSettlementsWithConfiguration(cashfreeConfiguration, x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSettlementsWithConfiguration(cashfreeConfiguration, x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
         * @summary Settlement Reconciliation
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGSettlementFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSettlementFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * SettlementReconciliationApi - object-oriented interface
 * @export
 * @class SettlementReconciliationApi
 * @extends {BaseAPI}
 */
/**
 * SettlementsApi - axios parameter creator
 * @export
 */
const SettlementsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to pass the CBRICS ID to Cashfree and mark an order for settlement.
         * @summary Mark Order For Settlement
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreateOrderSettlementRequestBody} [CreateOrderSettlementRequestBody] Create Order Settlement Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * CreateOrderSettlementRequestBody?: CreateOrderSettlementRequestBody,
         */
        markForSettlement: (x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('markForSettlement', 'x_api_version', x_api_version);
            const localVarPath = `/orders/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderSettlementRequestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        markForSettlementWithConfiguration: (cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('markForSettlement', 'x_api_version', x_api_version);
            const localVarPath = `/orders/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderSettlementRequestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all the settlements of a particular order.
         * @summary Get Settlements by Order ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchSettlement: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchSettlement', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchSettlement', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/settlements`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGOrderFetchSettlementWithConfiguration: (cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGOrderFetchSettlement', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            assertParamExists('pGOrderFetchSettlement', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/settlements`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SettlementsApi - functional programming interface
 * @export
 */
const SettlementsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SettlementsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to pass the CBRICS ID to Cashfree and mark an order for settlement.
         * @summary Mark Order For Settlement
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {CreateOrderSettlementRequestBody} [CreateOrderSettlementRequestBody] Create Order Settlement Request Body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markForSettlement(x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.markForSettlement(x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        markForSettlementWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.markForSettlementWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view all the settlements of a particular order.
         * @summary Get Settlements by Order ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGOrderFetchSettlementWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchSettlementWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * SettlementsApi - object-oriented interface
 * @export
 * @class SettlementsApi
 * @extends {BaseAPI}
 */
/**
 * SimulationApi - axios parameter creator
 * @export
 */
const SimulationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to fetch simulated payment details.
         * @summary Fetch Simulation
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} simulation_id Provide the SimulationId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchSimulation: (x_api_version, simulation_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchSimulation', 'x_api_version', x_api_version);
            // verify required parameter 'simulation_id' is not null or undefined
            assertParamExists('pGFetchSimulation', 'simulation_id', simulation_id);
            const localVarPath = `/simulate/{simulation_id}`
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulation_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGFetchSimulationWithConfiguration: (cashfreeConfiguration, x_api_version, simulation_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGFetchSimulation', 'x_api_version', x_api_version);
            // verify required parameter 'simulation_id' is not null or undefined
            assertParamExists('pGFetchSimulation', 'simulation_id', simulation_id);
            const localVarPath = `/simulate/{simulation_id}`
                .replace(`{${"simulation_id"}}`, encodeURIComponent(String(simulation_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to simulate payment. To use this API you should first create an order using the Create Order API. Also, you need to create a payment with the same order.
         * @summary Simulate Payment
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SimulateRequest} SimulateRequest Request Body to Make Simulation
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGSimulatePayment: (x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSimulatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'SimulateRequest' is not null or undefined
            assertParamExists('pGSimulatePayment', 'SimulateRequest', SimulateRequest);
            const localVarPath = `/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SimulateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGSimulatePaymentWithConfiguration: (cashfreeConfiguration, x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGSimulatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'SimulateRequest' is not null or undefined
            assertParamExists('pGSimulatePayment', 'SimulateRequest', SimulateRequest);
            const localVarPath = `/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SimulateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SimulationApi - functional programming interface
 * @export
 */
const SimulationApiFp = function (configuration) {
    const localVarAxiosParamCreator = SimulationApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to fetch simulated payment details.
         * @summary Fetch Simulation
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} simulation_id Provide the SimulationId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchSimulation(x_api_version, simulation_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSimulation(x_api_version, simulation_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGFetchSimulationWithConfiguration(cashfreeConfiguration, x_api_version, simulation_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSimulationWithConfiguration(cashfreeConfiguration, x_api_version, simulation_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to simulate payment. To use this API you should first create an order using the Create Order API. Also, you need to create a payment with the same order.
         * @summary Simulate Payment
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SimulateRequest} SimulateRequest Request Body to Make Simulation
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGSimulatePayment(x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSimulatePayment(x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGSimulatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSimulatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * SimulationApi - object-oriented interface
 * @export
 * @class SimulationApi
 * @extends {BaseAPI}
 */
/**
 * SoftPOSApi - axios parameter creator
 * @export
 */
const SoftPOSApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create new terminals to use softPOS.
         * @summary Create Terminal
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposCreateTerminal: (x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposCreateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalRequest' is not null or undefined
            assertParamExists('sposCreateTerminal', 'CreateTerminalRequest', CreateTerminalRequest);
            const localVarPath = `/terminal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposCreateTerminalWithConfiguration: (cashfreeConfiguration, x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposCreateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalRequest' is not null or undefined
            assertParamExists('sposCreateTerminal', 'CreateTerminalRequest', CreateTerminalRequest);
            const localVarPath = `/terminal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
         * @summary Create Terminal Transaction
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposCreateTerminalTransaction: (x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposCreateTerminalTransaction', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalTransactionRequest' is not null or undefined
            assertParamExists('sposCreateTerminalTransaction', 'CreateTerminalTransactionRequest', CreateTerminalTransactionRequest);
            const localVarPath = `/terminal/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalTransactionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposCreateTerminalTransactionWithConfiguration: (cashfreeConfiguration, x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposCreateTerminalTransaction', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalTransactionRequest' is not null or undefined
            assertParamExists('sposCreateTerminalTransaction', 'CreateTerminalTransactionRequest', CreateTerminalTransactionRequest);
            const localVarPath = `/terminal/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalTransactionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to demap a device from soundbox.
         * @summary Demap Soundbox Vpa
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {DemapSoundboxVpaRequest} DemapSoundboxVpaRequest Request body to demap soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposDemapSoundboxVpa: (x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposDemapSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'DemapSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposDemapSoundboxVpa', 'DemapSoundboxVpaRequest', DemapSoundboxVpaRequest);
            const localVarPath = `/terminal/demap/soundbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(DemapSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposDemapSoundboxVpaWithConfiguration: (cashfreeConfiguration, x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposDemapSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'DemapSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposDemapSoundboxVpa', 'DemapSoundboxVpaRequest', DemapSoundboxVpaRequest);
            const localVarPath = `/terminal/demap/soundbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(DemapSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all details of a terminal.
         * @summary Get Terminal Status using Phone Number
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no The terminal for which you want to view the order details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposFetchTerminal: (x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            assertParamExists('sposFetchTerminal', 'terminal_phone_no', terminal_phone_no);
            const localVarPath = `/terminal/{terminal_phone_no}`
                .replace(`{${"terminal_phone_no"}}`, encodeURIComponent(String(terminal_phone_no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposFetchTerminalWithConfiguration: (cashfreeConfiguration, x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            assertParamExists('sposFetchTerminal', 'terminal_phone_no', terminal_phone_no);
            const localVarPath = `/terminal/{terminal_phone_no}`
                .replace(`{${"terminal_phone_no"}}`, encodeURIComponent(String(terminal_phone_no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
         * @summary Fetch Terminal QR Codes
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposFetchTerminalQRCodes: (x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'terminal_phone_no', terminal_phone_no);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (terminal_phone_no !== undefined) {
                localVarQueryParameter['terminal_phone_no'] = terminal_phone_no;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposFetchTerminalQRCodesWithConfiguration: (cashfreeConfiguration, x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'terminal_phone_no', terminal_phone_no);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalQRCodes', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (terminal_phone_no !== undefined) {
                localVarQueryParameter['terminal_phone_no'] = terminal_phone_no;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can fetch all the active and mapped SoundboxVpa corresponding to given terminal id or deviceSerialNo. Provide either the device_serial_no or cf_terminal_id in the request.
         * @summary Fetch Terminal Soundbox vpa
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} device_serial_no Device Serial No assinged. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get Soundbox Vpa. Required if you are not providing the device_serial_no in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposFetchTerminalSoundboxVpa: (x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'device_serial_no' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'device_serial_no', device_serial_no);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/soundbox/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (device_serial_no !== undefined) {
                localVarQueryParameter['device_serial_no'] = device_serial_no;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposFetchTerminalSoundboxVpaWithConfiguration: (cashfreeConfiguration, x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'device_serial_no' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'device_serial_no', device_serial_no);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalSoundboxVpa', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/soundbox/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (device_serial_no !== undefined) {
                localVarQueryParameter['device_serial_no'] = device_serial_no;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get  terminal transaction.
         * @summary Get Terminal Transaction
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} utr Utr of the transaction.
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposFetchTerminalTransaction: (x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'x_api_version', x_api_version);
            // verify required parameter 'utr' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'utr', utr);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/{cf_terminal_id}/payments`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (utr !== undefined) {
                localVarQueryParameter['utr'] = utr;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposFetchTerminalTransactionWithConfiguration: (cashfreeConfiguration, x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'x_api_version', x_api_version);
            // verify required parameter 'utr' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'utr', utr);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposFetchTerminalTransaction', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/{cf_terminal_id}/payments`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (utr !== undefined) {
                localVarQueryParameter['utr'] = utr;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to onboard a terminal Vpa to soundbox.
         * @summary Onboard Soundbox Vpa
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {OnboardSoundboxVpaRequest} OnboardSoundboxVpaRequest Request body to onboard soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposOnboardSoundboxVpa: (x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposOnboardSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'OnboardSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposOnboardSoundboxVpa', 'OnboardSoundboxVpaRequest', OnboardSoundboxVpaRequest);
            const localVarPath = `/terminal/soundbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OnboardSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposOnboardSoundboxVpaWithConfiguration: (cashfreeConfiguration, x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposOnboardSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'OnboardSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposOnboardSoundboxVpa', 'OnboardSoundboxVpaRequest', OnboardSoundboxVpaRequest);
            const localVarPath = `/terminal/soundbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(OnboardSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to update a terminal Vpa to soundbox.
         * @summary Update Soundbox Vpa
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateSoundboxVpaRequest} UpdateSoundboxVpaRequest Request body to update soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUpdateSoundboxVpa: (x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'UpdateSoundboxVpaRequest', UpdateSoundboxVpaRequest);
            const localVarPath = `/terminal/{cf_terminal_id}/soundbox`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposUpdateSoundboxVpaWithConfiguration: (cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateSoundboxVpaRequest' is not null or undefined
            assertParamExists('sposUpdateSoundboxVpa', 'UpdateSoundboxVpaRequest', UpdateSoundboxVpaRequest);
            const localVarPath = `/terminal/{cf_terminal_id}/soundbox`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateSoundboxVpaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
         * @summary Update Terminal
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUpdateTerminal: (x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalRequest' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'UpdateTerminalRequest', UpdateTerminalRequest);
            const localVarPath = `/terminal/{cf_terminal_id}`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposUpdateTerminalWithConfiguration: (cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalRequest' is not null or undefined
            assertParamExists('sposUpdateTerminal', 'UpdateTerminalRequest', UpdateTerminalRequest);
            const localVarPath = `/terminal/{cf_terminal_id}`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to update the terminal status.
         * @summary Update Terminal Status
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUpdateTerminalStatus: (x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalStatusRequest' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'UpdateTerminalStatusRequest', UpdateTerminalStatusRequest);
            const localVarPath = `/terminal/{cf_terminal_id}/status`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalStatusRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposUpdateTerminalStatusWithConfiguration: (cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalStatusRequest' is not null or undefined
            assertParamExists('sposUpdateTerminalStatus', 'UpdateTerminalStatusRequest', UpdateTerminalStatusRequest);
            const localVarPath = `/terminal/{cf_terminal_id}/status`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalStatusRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to upload the terminal documents.
         * @summary Upload Terminal Docs
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUploadTerminalDocs: (x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UploadTerminalDocs' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'UploadTerminalDocs', UploadTerminalDocs);
            const localVarPath = `/terminal/{cf_terminal_id}/docs`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UploadTerminalDocs, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        sposUploadTerminalDocsWithConfiguration: (cashfreeConfiguration, x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UploadTerminalDocs' is not null or undefined
            assertParamExists('sposUploadTerminalDocs', 'UploadTerminalDocs', UploadTerminalDocs);
            const localVarPath = `/terminal/{cf_terminal_id}/docs`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(UploadTerminalDocs, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SoftPOSApi - functional programming interface
 * @export
 */
const SoftPOSApiFp = function (configuration) {
    const localVarAxiosParamCreator = SoftPOSApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create new terminals to use softPOS.
         * @summary Create Terminal
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposCreateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
         * @summary Create Terminal Transaction
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposCreateTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to demap a device from soundbox.
         * @summary Demap Soundbox Vpa
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {DemapSoundboxVpaRequest} DemapSoundboxVpaRequest Request body to demap soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposDemapSoundboxVpa(x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposDemapSoundboxVpa(x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposDemapSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposDemapSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to view all details of a terminal.
         * @summary Get Terminal Status using Phone Number
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no The terminal for which you want to view the order details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposFetchTerminalWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
         * @summary Fetch Terminal QR Codes
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposFetchTerminalQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * You can fetch all the active and mapped SoundboxVpa corresponding to given terminal id or deviceSerialNo. Provide either the device_serial_no or cf_terminal_id in the request.
         * @summary Fetch Terminal Soundbox vpa
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} device_serial_no Device Serial No assinged. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get Soundbox Vpa. Required if you are not providing the device_serial_no in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminalSoundboxVpa(x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalSoundboxVpa(x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposFetchTerminalSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get  terminal transaction.
         * @summary Get Terminal Transaction
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} utr Utr of the transaction.
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposFetchTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to onboard a terminal Vpa to soundbox.
         * @summary Onboard Soundbox Vpa
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {OnboardSoundboxVpaRequest} OnboardSoundboxVpaRequest Request body to onboard soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposOnboardSoundboxVpa(x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposOnboardSoundboxVpa(x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposOnboardSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposOnboardSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to update a terminal Vpa to soundbox.
         * @summary Update Soundbox Vpa
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateSoundboxVpaRequest} UpdateSoundboxVpaRequest Request body to update soundbox vpa
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUpdateSoundboxVpa(x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateSoundboxVpa(x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposUpdateSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
         * @summary Update Terminal
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposUpdateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to update the terminal status.
         * @summary Update Terminal Status
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposUpdateTerminalStatusWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalStatusWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to upload the terminal documents.
         * @summary Upload Terminal Docs
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        sposUploadTerminalDocsWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUploadTerminalDocsWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * SoftPOSApi - object-oriented interface
 * @export
 * @class SoftPOSApi
 * @extends {BaseAPI}
 */
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
const SubscriptionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create an auth or to raise a charge.
         * @summary Raise a charge or create an auth.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateSubscriptionPaymentRequest} CreateSubscriptionPaymentRequest Request body to create a subscription payment.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsCreatePayment: (x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'CreateSubscriptionPaymentRequest' is not null or undefined
            assertParamExists('subsCreatePayment', 'CreateSubscriptionPaymentRequest', CreateSubscriptionPaymentRequest);
            const localVarPath = `/subscriptions/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsCreatePaymentWithConfiguration: (cashfreeConfiguration, x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'CreateSubscriptionPaymentRequest' is not null or undefined
            assertParamExists('subsCreatePayment', 'CreateSubscriptionPaymentRequest', CreateSubscriptionPaymentRequest);
            const localVarPath = `/subscriptions/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * A plan allows your customer to identify the features you offer along with your pricing. You can create plans as per the pricing you support for your services. For each plan, you can set a pre-decided frequency and amount with which they’ll be charged. Example: Netflix Plans - Premium, Basic, Standard, Mobile. Each plan differs and caters for a particular set of audiences.
         * @summary Create a plan.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreatePlanRequest} CreatePlanRequest Request body to create a plan.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsCreatePlan: (x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreatePlan', 'x_api_version', x_api_version);
            // verify required parameter 'CreatePlanRequest' is not null or undefined
            assertParamExists('subsCreatePlan', 'CreatePlanRequest', CreatePlanRequest);
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreatePlanRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsCreatePlanWithConfiguration: (cashfreeConfiguration, x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreatePlan', 'x_api_version', x_api_version);
            // verify required parameter 'CreatePlanRequest' is not null or undefined
            assertParamExists('subsCreatePlan', 'CreatePlanRequest', CreatePlanRequest);
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreatePlanRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This API allows you to create refund on a successful payment. Refund amount can be partial or the full amount of the payment.
         * @summary Create a refund.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {CreateSubscriptionRefundRequest} CreateSubscriptionRefundRequest Request body to create a subscription refund.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        subsCreateRefund: (x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreateRefund', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsCreateRefund', 'subscription_id', subscription_id);
            // verify required parameter 'CreateSubscriptionRefundRequest' is not null or undefined
            assertParamExists('subsCreateRefund', 'CreateSubscriptionRefundRequest', CreateSubscriptionRefundRequest);
            const localVarPath = `/subscriptions/{subscription_id}/refunds`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionRefundRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsCreateRefundWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreateRefund', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsCreateRefund', 'subscription_id', subscription_id);
            // verify required parameter 'CreateSubscriptionRefundRequest' is not null or undefined
            assertParamExists('subsCreateRefund', 'CreateSubscriptionRefundRequest', CreateSubscriptionRefundRequest);
            const localVarPath = `/subscriptions/{subscription_id}/refunds`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionRefundRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new subscription.
         * @summary Create Subscription
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateSubscriptionRequest} CreateSubscriptionRequest Request body to create a subscription.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsCreateSubscription: (x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreateSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'CreateSubscriptionRequest' is not null or undefined
            assertParamExists('subsCreateSubscription', 'CreateSubscriptionRequest', CreateSubscriptionRequest);
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsCreateSubscriptionWithConfiguration: (cashfreeConfiguration, x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsCreateSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'CreateSubscriptionRequest' is not null or undefined
            assertParamExists('subsCreateSubscription', 'CreateSubscriptionRequest', CreateSubscriptionRequest);
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch plan details.
         * @summary Fetch Plan
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} plan_id Provide the PlanId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsFetchPlan: (x_api_version, plan_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchPlan', 'x_api_version', x_api_version);
            // verify required parameter 'plan_id' is not null or undefined
            assertParamExists('subsFetchPlan', 'plan_id', plan_id);
            const localVarPath = `/plans/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(plan_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsFetchPlanWithConfiguration: (cashfreeConfiguration, x_api_version, plan_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchPlan', 'x_api_version', x_api_version);
            // verify required parameter 'plan_id' is not null or undefined
            assertParamExists('subsFetchPlan', 'plan_id', plan_id);
            const localVarPath = `/plans/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(plan_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch subscription details.
         * @summary Fetch Subscription
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsFetchSubscription: (x_api_version, subscription_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscription', 'subscription_id', subscription_id);
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsFetchSubscriptionWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscription', 'subscription_id', subscription_id);
            const localVarPath = `/subscriptions/{subscription_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch details of a single payment of a subscription.
         * @summary Fetch details of a single payment.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        subsFetchSubscriptionPayment: (x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'subscription_id', subscription_id);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'payment_id', payment_id);
            const localVarPath = `/subscriptions/{subscription_id}/payments/{payment_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsFetchSubscriptionPaymentWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'subscription_id', subscription_id);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayment', 'payment_id', payment_id);
            const localVarPath = `/subscriptions/{subscription_id}/payments/{payment_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch all payments of a subscription.
         * @summary Fetch details of all payments of a subscription.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subsFetchSubscriptionPayments: (x_api_version, subscription_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayments', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayments', 'subscription_id', subscription_id);
            const localVarPath = `/subscriptions/{subscription_id}/payments`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsFetchSubscriptionPaymentsWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayments', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionPayments', 'subscription_id', subscription_id);
            const localVarPath = `/subscriptions/{subscription_id}/payments`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch details of a refund of a subscription payment.
         * @summary Fetch details of a refund.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} refund_id Provide the PaymentId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        subsFetchSubscriptionRefund: (x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'subscription_id', subscription_id);
            // verify required parameter 'refund_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'refund_id', refund_id);
            const localVarPath = `/subscriptions/{subscription_id}/refunds/{refund_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refund_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsFetchSubscriptionRefundWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'subscription_id', subscription_id);
            // verify required parameter 'refund_id' is not null or undefined
            assertParamExists('subsFetchSubscriptionRefund', 'refund_id', refund_id);
            const localVarPath = `/subscriptions/{subscription_id}/refunds/{refund_id}`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refund_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to manage a subscription. You can cancel, pause, activate or change the plan of a subscription.
         * @summary Manage a subscription.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {ManageSubscriptionRequest} ManageSubscriptionRequest Request body to manage a subscription.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        subsManageSubscription: (x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsManageSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsManageSubscription', 'subscription_id', subscription_id);
            // verify required parameter 'ManageSubscriptionRequest' is not null or undefined
            assertParamExists('subsManageSubscription', 'ManageSubscriptionRequest', ManageSubscriptionRequest);
            const localVarPath = `/subscriptions/{subscription_id}/manage`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ManageSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsManageSubscriptionWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsManageSubscription', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsManageSubscription', 'subscription_id', subscription_id);
            // verify required parameter 'ManageSubscriptionRequest' is not null or undefined
            assertParamExists('subsManageSubscription', 'ManageSubscriptionRequest', ManageSubscriptionRequest);
            const localVarPath = `/subscriptions/{subscription_id}/manage`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ManageSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to manage a payment of a subscription. A payment can be cancelled or retried with this API.
         * @summary Manage a single payment.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {ManageSubscriptionPaymentRequest} ManageSubscriptionPaymentRequest Request body to manage a subscription payment.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * ManageSubscriptionPaymentRequest: ManageSubscriptionPaymentRequest,
         */
        subsManageSubscriptionPayment: (x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'subscription_id', subscription_id);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'payment_id', payment_id);
            // verify required parameter 'ManageSubscriptionPaymentRequest' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'ManageSubscriptionPaymentRequest', ManageSubscriptionPaymentRequest);
            const localVarPath = `/subscriptions/{subscription_id}/payments/{payment_id}/manage`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ManageSubscriptionPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subsManageSubscriptionPaymentWithConfiguration: (cashfreeConfiguration, x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'x_api_version', x_api_version);
            // verify required parameter 'subscription_id' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'subscription_id', subscription_id);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'payment_id', payment_id);
            // verify required parameter 'ManageSubscriptionPaymentRequest' is not null or undefined
            assertParamExists('subsManageSubscriptionPayment', 'ManageSubscriptionPaymentRequest', ManageSubscriptionPaymentRequest);
            const localVarPath = `/subscriptions/{subscription_id}/payments/{payment_id}/manage`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscription_id)))
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ManageSubscriptionPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to upload file for Physical Nach Authorization.
         * @summary API to upload file for Physical Nach Authorization.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {File} file Select the .jpg file that should be uploaded or provide the path of that file. You cannot upload a file that is more than 1MB in size.
         * @param {string} payment_id2 Authorization Payment Id for physical nach authorization
         * @param {string} action Action to be performed on the file. Can be SUBMIT_DOCUMENT
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * payment_id2: string,
         */
        subscriptionDocumentUpload: (x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'x_api_version', x_api_version);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'payment_id', payment_id);
            // verify required parameter 'file' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'file', file);
            // verify required parameter 'payment_id2' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'payment_id2', payment_id2);
            // verify required parameter 'action' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'action', action);
            const localVarPath = `/subscriptions/pay/documents/{payment_id}`
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (payment_id2 !== undefined) {
                localVarFormParams.append('payment_id', payment_id2);
            }
            if (action !== undefined) {
                localVarFormParams.append('action', action);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subscriptionDocumentUploadWithConfiguration: (cashfreeConfiguration, x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'x_api_version', x_api_version);
            // verify required parameter 'payment_id' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'payment_id', payment_id);
            // verify required parameter 'file' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'file', file);
            // verify required parameter 'payment_id2' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'payment_id2', payment_id2);
            // verify required parameter 'action' is not null or undefined
            assertParamExists('subscriptionDocumentUpload', 'action', action);
            const localVarPath = `/subscriptions/pay/documents/{payment_id}`
                .replace(`{${"payment_id"}}`, encodeURIComponent(String(payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (payment_id2 !== undefined) {
                localVarFormParams.append('payment_id', payment_id2);
            }
            if (action !== undefined) {
                localVarFormParams.append('action', action);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to check if a payment method is enabled for your account.
         * @summary API to get all the payment method details available for subscription payments.
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SubscriptionEligibilityRequest} SubscriptionEligibilityRequest Request body to fetch subscription eligibile payment method details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        subscriptionEligibility: (x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subscriptionEligibility', 'x_api_version', x_api_version);
            // verify required parameter 'SubscriptionEligibilityRequest' is not null or undefined
            assertParamExists('subscriptionEligibility', 'SubscriptionEligibilityRequest', SubscriptionEligibilityRequest);
            const localVarPath = `/subscriptions/eligibility/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionEligibilityRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        subscriptionEligibilityWithConfiguration: (cashfreeConfiguration, x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('subscriptionEligibility', 'x_api_version', x_api_version);
            // verify required parameter 'SubscriptionEligibilityRequest' is not null or undefined
            assertParamExists('subscriptionEligibility', 'SubscriptionEligibilityRequest', SubscriptionEligibilityRequest);
            const localVarPath = `/subscriptions/eligibility/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionEligibilityRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SubscriptionApi - functional programming interface
 * @export
 */
const SubscriptionApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create an auth or to raise a charge.
         * @summary Raise a charge or create an auth.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateSubscriptionPaymentRequest} CreateSubscriptionPaymentRequest Request body to create a subscription payment.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsCreatePayment(x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreatePayment(x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsCreatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * A plan allows your customer to identify the features you offer along with your pricing. You can create plans as per the pricing you support for your services. For each plan, you can set a pre-decided frequency and amount with which they’ll be charged. Example: Netflix Plans - Premium, Basic, Standard, Mobile. Each plan differs and caters for a particular set of audiences.
         * @summary Create a plan.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreatePlanRequest} CreatePlanRequest Request body to create a plan.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsCreatePlan(x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreatePlan(x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsCreatePlanWithConfiguration(cashfreeConfiguration, x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreatePlanWithConfiguration(cashfreeConfiguration, x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * This API allows you to create refund on a successful payment. Refund amount can be partial or the full amount of the payment.
         * @summary Create a refund.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {CreateSubscriptionRefundRequest} CreateSubscriptionRefundRequest Request body to create a subscription refund.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsCreateRefund(x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreateRefund(x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to create a new subscription.
         * @summary Create Subscription
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateSubscriptionRequest} CreateSubscriptionRequest Request body to create a subscription.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsCreateSubscription(x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreateSubscription(x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsCreateSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsCreateSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch plan details.
         * @summary Fetch Plan
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} plan_id Provide the PlanId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsFetchPlan(x_api_version, plan_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchPlan(x_api_version, plan_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsFetchPlanWithConfiguration(cashfreeConfiguration, x_api_version, plan_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchPlanWithConfiguration(cashfreeConfiguration, x_api_version, plan_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch subscription details.
         * @summary Fetch Subscription
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsFetchSubscription(x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscription(x_api_version, subscription_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsFetchSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch details of a single payment of a subscription.
         * @summary Fetch details of a single payment.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsFetchSubscriptionPayment(x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionPayment(x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsFetchSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch all payments of a subscription.
         * @summary Fetch details of all payments of a subscription.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsFetchSubscriptionPayments(x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionPayments(x_api_version, subscription_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsFetchSubscriptionPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch details of a refund of a subscription payment.
         * @summary Fetch details of a refund.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} refund_id Provide the PaymentId for which the details have to be fetched.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsFetchSubscriptionRefund(x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionRefund(x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsFetchSubscriptionRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsFetchSubscriptionRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to manage a subscription. You can cancel, pause, activate or change the plan of a subscription.
         * @summary Manage a subscription.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {ManageSubscriptionRequest} ManageSubscriptionRequest Request body to manage a subscription.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsManageSubscription(x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsManageSubscription(x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsManageSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsManageSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to manage a payment of a subscription. A payment can be cancelled or retried with this API.
         * @summary Manage a single payment.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {ManageSubscriptionPaymentRequest} ManageSubscriptionPaymentRequest Request body to manage a subscription payment.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsManageSubscriptionPayment(x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsManageSubscriptionPayment(x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subsManageSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subsManageSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to upload file for Physical Nach Authorization.
         * @summary API to upload file for Physical Nach Authorization.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} payment_id Provide the PaymentId using which the payment was created.
         * @param {File} file Select the .jpg file that should be uploaded or provide the path of that file. You cannot upload a file that is more than 1MB in size.
         * @param {string} payment_id2 Authorization Payment Id for physical nach authorization
         * @param {string} action Action to be performed on the file. Can be SUBMIT_DOCUMENT
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionDocumentUpload(x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subscriptionDocumentUpload(x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subscriptionDocumentUploadWithConfiguration(cashfreeConfiguration, x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subscriptionDocumentUploadWithConfiguration(cashfreeConfiguration, x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to check if a payment method is enabled for your account.
         * @summary API to get all the payment method details available for subscription payments.
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SubscriptionEligibilityRequest} SubscriptionEligibilityRequest Request body to fetch subscription eligibile payment method details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionEligibility(x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subscriptionEligibility(x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        subscriptionEligibilityWithConfiguration(cashfreeConfiguration, x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subscriptionEligibilityWithConfiguration(cashfreeConfiguration, x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
/**
 * TokenVaultApi - axios parameter creator
 * @export
 */
const TokenVaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to delete a saved card instrument for a customer_id and instrument_id
         * @summary Delete Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id which needs to be deleted
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerDeleteInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCustomerDeleteInstrumentWithConfiguration: (cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerDeleteInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
         * @summary Fetch Specific Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerFetchInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCustomerFetchInstrumentWithConfiguration: (cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch saved cards for a customer_id
         * @summary Fetch All Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerFetchInstruments: (x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'customer_id', customer_id);
            // verify required parameter 'instrument_type' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'instrument_type', instrument_type);
            const localVarPath = `/customers/{customer_id}/instruments`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            if (instrument_type !== undefined) {
                localVarQueryParameter['instrument_type'] = instrument_type;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCustomerFetchInstrumentsWithConfiguration: (cashfreeConfiguration, x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'customer_id', customer_id);
            // verify required parameter 'instrument_type' is not null or undefined
            assertParamExists('pGCustomerFetchInstruments', 'instrument_type', instrument_type);
            const localVarPath = `/customers/{customer_id}/instruments`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            if (instrument_type !== undefined) {
                localVarQueryParameter['instrument_type'] = instrument_type;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
         * @summary Fetch cryptogram for a saved card instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerInstrumentsFetchCryptogram: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}/cryptogram`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        // With Configuration
        pGCustomerInstrumentsFetchCryptogramWithConfiguration: (cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}/cryptogram`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-apikey", cashfreeConfiguration);
            // authentication XClientSecret required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-secret", cashfreeConfiguration);
            // authentication XPartnerMerchantID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-partner-merchantid", cashfreeConfiguration);
            // authentication XClientID required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-id", cashfreeConfiguration);
            // authentication XClientSignatureHeader required
            yield setApiKeyToObjectWithConfiguration(localVarHeaderParameter, "x-client-signature", cashfreeConfiguration);
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.3.10';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TokenVaultApi - functional programming interface
 * @export
 */
const TokenVaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = TokenVaultApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to delete a saved card instrument for a customer_id and instrument_id
         * @summary Delete Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id which needs to be deleted
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCustomerDeleteInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerDeleteInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
         * @summary Fetch Specific Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCustomerFetchInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to fetch saved cards for a customer_id
         * @summary Fetch All Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCustomerFetchInstrumentsWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrumentsWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
         * @summary Fetch cryptogram for a saved card instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        pGCustomerInstrumentsFetchCryptogramWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerInstrumentsFetchCryptogramWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * TokenVaultApi - object-oriented interface
 * @export
 * @class TokenVaultApi
 * @extends {BaseAPI}
 */
/**
 * @export
 */
export const PGCustomerFetchInstrumentsInstrumentTypeEnum = {
    CARD: 'card',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
class Environment {
    constructor() {
        this.PRODUCTION = CFEnvironment.PRODUCTION;
        this.SANDBOX = CFEnvironment.SANDBOX;
    }
}
export class PGWebhookEvent {
    constructor(type, rawBody, object) {
        this.type = type;
        this.raw = rawBody;
        this.object = object;
    }
}
export class CashfreeConfiguration {
    constructor(XClientId, XClientSecret, XPartnerKey, XClientSignature, XPartnerMerchantId) {
        if (XClientId !== "") {
            this.XClientId = XClientId;
        }
        if (XClientSecret !== "") {
            this.XClientSecret = XClientSecret;
        }
        if (XPartnerKey !== "") {
            this.XPartnerKey = XPartnerKey;
        }
        if (XClientSignature !== "") {
            this.XClientSignature = XClientSignature;
        }
        if (XPartnerMerchantId !== "") {
            this.XPartnerMerchantId = XPartnerMerchantId;
        }
    }
}
export class Cashfree {
    /**
     * Use this API to verify your webhook signature once you receive from Cashfree's server.
     * @summary Verify Webhook Signatures
     * @param {string} signature that is present in the header of the webhook ("x-webhook-signature")
     * @param {string} rawBody is the entire body sent to the server in string format
     * @param {string} timestamp that is present in the header of the webhook ("x-webhook-timestamp")
     * @throws {Error}
     */
    static PGVerifyWebhookSignature(signature, rawBody, timestamp) {
        const body = timestamp + rawBody;
        const secretKey = Cashfree.XClientSecret;
        let generatedSignature = crypto.createHmac('sha256', secretKey).update(body).digest("base64");
        if (generatedSignature === signature) {
            let jsonObject = JSON.parse(rawBody);
            return new PGWebhookEvent(jsonObject.type, rawBody, jsonObject);
        }
        throw new Error("Generated signature and received signature did not match.");
    }
    /**
     * Create Customer at Cashfree
     * @summary Create Customer at Cashfree
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    static PGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return CustomersApiFp().pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCreateCustomerWithConfiguration(cashfreeConfiguration, x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return CustomersApiFp().pGCreateCustomerWithConfiguration(cashfreeConfiguration, x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a pre-activated vpa for partner.
     * @summary Create Pre-Activated Vpas for partner
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {CreatePartnerVpaRequest} [CreatePartnerVpaRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    static TerminalCreateQRCodes(x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DefaultApiFp().terminalCreateQRCodes(x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static TerminalCreateQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DefaultApiFp().terminalCreateQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreatePartnerVpaRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get a pre-activated vpa for partner.
     * @summary Get Pre-Activated Vpas for partner
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} status Status of pre-created Qr.
     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get pre-generated staticQRs.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    static TerminalGetQRCodes(x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DefaultApiFp().terminalGetQRCodes(x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static TerminalGetQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DefaultApiFp().terminalGetQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, status, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get accept the Dispute by specifying the Dispute ID.
     * @summary Accept Dispute by Dispute ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {number} dispute_id
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    static PGAcceptDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGAcceptDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGAcceptDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGAcceptDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get Dispute details by specifying the Dispute ID.
     * @summary Get Disputes by Dispute ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {number} dispute_id
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    static PGFetchDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchDisputeByID(x_api_version, dispute_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchDisputeByIDWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all Dispute details by specifying the Order ID.
     * @summary Get Disputes by Order Id
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    static PGFetchOrderDisputes(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchOrderDisputes(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchOrderDisputesWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchOrderDisputesWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all Dispute details by specifying the Payment ID.
     * @summary Get Disputes by Payment ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {number} cf_payment_id
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    static PGFetchPaymentDisputes(x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchPaymentDisputes(x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchPaymentDisputesWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGFetchPaymentDisputesWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to Submit the Evidences to contest the Dispute by specifying the Dispute ID.
     * @summary Submit Evidence to contest the Dispute by Dispute ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {number} dispute_id
     * @param {string} file File types supported are jpeg, jpg, png, pdf and maximum file size allowed is 20 MB.
     * @param {string} doc_type Mention the type of the document you are uploading. Possible values :- Delivery/Service Proof, Shipping Proof, Statement of Service, Proof of Service Used, Cancellation of Service Proof, Refund Proof, Business model explanation, Extra Charges Declaration, Terms &amp; Conditions, Customer Withdrawal Letter, Certificate of Authenticity, Reseller Agreement. You can use get evidences to contest dispute API to fetch set of documents required to contest particular dispute.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [note]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    static PGUploadDisputesDocuments(x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGUploadDisputesDocuments(x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGUploadDisputesDocumentsWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return DisputesApiFp().pGUploadDisputesDocumentsWithConfiguration(cashfreeConfiguration, x_api_version, dispute_id, file, doc_type, x_request_id, x_idempotency_key, note, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * The Create Adjustment API will create a adjustment request either from vendor to the merchant or from merchant to the vendor.
     * @summary Create Adjustment
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {VendorAdjustmentRequest} [VendorAdjustmentRequest] Vendor Adjustment Request Body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESCreateAdjustment(x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateAdjustment(x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESCreateAdjustmentWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateAdjustmentWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, VendorAdjustmentRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.
     * @summary Create On Demand Transfer
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESCreateOnDemandTransferWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateOnDemandTransferWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.
     * @summary Create vendor
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESCreateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESCreateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.
     * @summary Download Vendor Documents
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESDownloadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESDownloadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get the details of a specific vendor associated with your Easy Split account.
     * @summary Get Vendor All Details
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESFetchVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESFetchVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.
     * @summary Get On Demand Balance
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESGetVendorBalanceWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorBalanceWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.
     * @summary Get Vendor Balance Transfer Charges
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.
     * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESGetVendorBalanceTransferChargesWithConfiguration(cashfreeConfiguration, x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorBalanceTransferChargesWithConfiguration(cashfreeConfiguration, x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch the details of all the KYC details of a particular vendor.
     * @summary Get Vendor All Documents Status
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESGetVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESGetVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
     * @summary Get Split and Settlement Details by OrderID v2.0
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.
     * @summary Update vendor Details
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESUpdateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESUpdateVendorsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to upload KYC documents of a specific vendor.
     * @summary Upload Vendor Docs
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} vendor_id The id which uniquely identifies your vendor.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.
     * @param {string} [doc_value] Enter the display name of the uploaded file.
     * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGESUploadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGESUploadVendorsDocsWithConfiguration(cashfreeConfiguration, x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Split After Payment API splits the payments to vendors after successful payment from the customers.
     * @summary Split After Payment
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderSplitAfterPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGOrderSplitAfterPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.
     * @summary Create Static Split Configuration
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {StaticSplitRequest} [StaticSplitRequest] Static Split
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderStaticSplitWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGOrderStaticSplitWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
     * @summary Get Split and Settlement Details by OrderID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasySplitApi
     */
    static PGSplitOrderRecon(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGSplitOrderRecon(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGSplitOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EasySplitApiFp().pGSplitOrderReconWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
     * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGEligibilityFetchCardlessEMIWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchCardlessEMIWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible offers for an order_id or order amount.
     * @summary Get Eligible Offers for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGEligibilityFetchOffersWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchOffersWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Paylater Payment Methods for a customer on an order.
     * @summary Get Eligible Paylater for a customer on an order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGEligibilityFetchPaylaterWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaylaterWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Payment Methods
     * @summary Get eligible Payment Methods
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGEligibilityFetchPaymentMethodsWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaymentMethodsWithConfiguration(cashfreeConfiguration, x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create offers with Cashfree from your backend
     * @summary Create Offer
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    static PGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OffersApiFp().pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCreateOfferWithConfiguration(cashfreeConfiguration, x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OffersApiFp().pGCreateOfferWithConfiguration(cashfreeConfiguration, x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get offer by offer_id
     * @summary Get Offer by ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} offer_id The offer ID for which you want to view the offer details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    static PGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OffersApiFp().pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchOfferWithConfiguration(cashfreeConfiguration, x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OffersApiFp().pGFetchOfferWithConfiguration(cashfreeConfiguration, x_api_version, offer_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
     * @summary Create Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCreateOrderWithConfiguration(cashfreeConfiguration, x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGCreateOrderWithConfiguration(cashfreeConfiguration, x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
     * @summary Get Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGFetchOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch the order related data like address,cart,offers,customer details etc using the Cashfree\'s `order_id`. ## When to use this API - To get the extended data associated with order. - Once the order is PAID - Once your customer returns to `return_url`
     * @summary Get Order Extended
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGFetchOrderExtendedData(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGFetchOrderExtendedData(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGFetchOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
     * @summary Terminate Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGTerminateOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGTerminateOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this api to update the order related data like shipment details,order delivery status etc. ## When to use this API - To provide/update the shipment details or order delivery status. - Once the order is PAID.
     * @summary Update Order Extended
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {UpdateOrderExtendedRequest} UpdateOrderExtendedRequest Request Body to Update extended data related to order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGUpdateOrderExtendedData(x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGUpdateOrderExtendedData(x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGUpdateOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return OrdersApiFp().pGUpdateOrderExtendedDataWithConfiguration(cashfreeConfiguration, x_api_version, order_id, UpdateOrderExtendedRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
     * @summary PG Reconciliation
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PGReconciliationApi
     */
    static PGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PGReconciliationApiFp().pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PGReconciliationApiFp().pGFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
     * @summary Cancel Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCancelLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGCancelLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
     * @summary Create Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCreateLinkWithConfiguration(cashfreeConfiguration, x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGCreateLinkWithConfiguration(cashfreeConfiguration, x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all details and status of a payment link.
     * @summary Fetch Payment Link Details
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGFetchLinkWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all order details for a payment link.
     * @summary Get Orders for a Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [status] Mention What is status of orders you want to fetch, default is PAID. Possible value: ALL, PAID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, status, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, status, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGLinkFetchOrdersWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, status, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentLinksApiFp().pGLinkFetchOrdersWithConfiguration(cashfreeConfiguration, x_api_version, link_id, x_request_id, x_idempotency_key, status, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to capture or void a preauthorized payment
     * @summary Preauthorization
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGAuthorizeOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGAuthorizeOrderWithConfiguration(cashfreeConfiguration, x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
     * @summary Submit or Resend OTP
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_payment_id The Cashfree payment or transaction ID.
     * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderAuthenticatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderAuthenticatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view payment details of an order for a payment ID.
     * @summary Get Payment by ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} cf_payment_id The Cashfree payment or transaction ID.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderFetchPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPaymentWithConfiguration(cashfreeConfiguration, x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all payment details for an order.
     * @summary Get Payments for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderFetchPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
     * @summary Order Pay
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGPayOrderWithConfiguration(cashfreeConfiguration, x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return PaymentsApiFp().pGPayOrderWithConfiguration(cashfreeConfiguration, x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to initiate refunds.
     * @summary Create Refund
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch a specific refund processed on your Cashfree Account.
     * @summary Get Refund
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} refund_id Refund Id of the refund you want to fetch.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderFetchRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefundWithConfiguration(cashfreeConfiguration, x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch all refunds processed against an order.
     * @summary Get All Refunds for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderFetchRefundsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefundsWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
     * @summary Get All Settlements
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementReconciliationApi
     */
    static PGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchSettlementsWithConfiguration(cashfreeConfiguration, x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGFetchSettlementsWithConfiguration(cashfreeConfiguration, x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
     * @summary Settlement Reconciliation
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementReconciliationApi
     */
    static PGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGSettlementFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGSettlementFetchReconWithConfiguration(cashfreeConfiguration, x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to pass the CBRICS ID to Cashfree and mark an order for settlement.
     * @summary Mark Order For Settlement
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {CreateOrderSettlementRequestBody} [CreateOrderSettlementRequestBody] Create Order Settlement Request Body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    static MarkForSettlement(x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementsApiFp().markForSettlement(x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static MarkForSettlementWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementsApiFp().markForSettlementWithConfiguration(cashfreeConfiguration, x_api_version, x_request_id, x_idempotency_key, CreateOrderSettlementRequestBody, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all the settlements of a particular order.
     * @summary Get Settlements by Order ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    static PGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementsApiFp().pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGOrderFetchSettlementWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SettlementsApiFp().pGOrderFetchSettlementWithConfiguration(cashfreeConfiguration, x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch simulated payment details.
     * @summary Fetch Simulation
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} simulation_id Provide the SimulationId for which the details have to be fetched.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApi
     */
    static PGFetchSimulation(x_api_version, simulation_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SimulationApiFp().pGFetchSimulation(x_api_version, simulation_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGFetchSimulationWithConfiguration(cashfreeConfiguration, x_api_version, simulation_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SimulationApiFp().pGFetchSimulationWithConfiguration(cashfreeConfiguration, x_api_version, simulation_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to simulate payment. To use this API you should first create an order using the Create Order API. Also, you need to create a payment with the same order.
     * @summary Simulate Payment
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {SimulateRequest} SimulateRequest Request Body to Make Simulation
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApi
     */
    static PGSimulatePayment(x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SimulationApiFp().pGSimulatePayment(x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGSimulatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SimulationApiFp().pGSimulatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, SimulateRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create new terminals to use softPOS.
     * @summary Create Terminal
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposCreateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
     * @summary Create Terminal Transaction
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposCreateTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to demap a device from soundbox.
     * @summary Demap Soundbox Vpa
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {DemapSoundboxVpaRequest} DemapSoundboxVpaRequest Request body to demap soundbox vpa
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposDemapSoundboxVpa(x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposDemapSoundboxVpa(x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposDemapSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposDemapSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, DemapSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all details of a terminal.
     * @summary Get Terminal Status using Phone Number
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} terminal_phone_no The terminal for which you want to view the order details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposFetchTerminalWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
     * @summary Fetch Terminal QR Codes
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposFetchTerminalQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalQRCodesWithConfiguration(cashfreeConfiguration, x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * You can fetch all the active and mapped SoundboxVpa corresponding to given terminal id or deviceSerialNo. Provide either the device_serial_no or cf_terminal_id in the request.
     * @summary Fetch Terminal Soundbox vpa
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} device_serial_no Device Serial No assinged. Required if you are not providing the cf_terminal_id in the request.
     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get Soundbox Vpa. Required if you are not providing the device_serial_no in the request.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminalSoundboxVpa(x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalSoundboxVpa(x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposFetchTerminalSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, device_serial_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get  terminal transaction.
     * @summary Get Terminal Transaction
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} utr Utr of the transaction.
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposFetchTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalTransactionWithConfiguration(cashfreeConfiguration, x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to onboard a terminal Vpa to soundbox.
     * @summary Onboard Soundbox Vpa
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {OnboardSoundboxVpaRequest} OnboardSoundboxVpaRequest Request body to onboard soundbox vpa
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposOnboardSoundboxVpa(x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposOnboardSoundboxVpa(x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposOnboardSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposOnboardSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, OnboardSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to update a terminal Vpa to soundbox.
     * @summary Update Soundbox Vpa
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UpdateSoundboxVpaRequest} UpdateSoundboxVpaRequest Request body to update soundbox vpa
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUpdateSoundboxVpa(x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateSoundboxVpa(x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposUpdateSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateSoundboxVpaWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateSoundboxVpaRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
     * @summary Update Terminal
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposUpdateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminalWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to update the terminal status.
     * @summary Update Terminal Status
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposUpdateTerminalStatusWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminalStatusWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to upload the terminal documents.
     * @summary Upload Terminal Docs
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SposUploadTerminalDocsWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SoftPOSApiFp().sposUploadTerminalDocsWithConfiguration(cashfreeConfiguration, x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create an auth or to raise a charge.
     * @summary Raise a charge or create an auth.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateSubscriptionPaymentRequest} CreateSubscriptionPaymentRequest Request body to create a subscription payment.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsCreatePayment(x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreatePayment(x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsCreatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreatePaymentWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * A plan allows your customer to identify the features you offer along with your pricing. You can create plans as per the pricing you support for your services. For each plan, you can set a pre-decided frequency and amount with which they’ll be charged. Example: Netflix Plans - Premium, Basic, Standard, Mobile. Each plan differs and caters for a particular set of audiences.
     * @summary Create a plan.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreatePlanRequest} CreatePlanRequest Request body to create a plan.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsCreatePlan(x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreatePlan(x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsCreatePlanWithConfiguration(cashfreeConfiguration, x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreatePlanWithConfiguration(cashfreeConfiguration, x_api_version, CreatePlanRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * This API allows you to create refund on a successful payment. Refund amount can be partial or the full amount of the payment.
     * @summary Create a refund.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {CreateSubscriptionRefundRequest} CreateSubscriptionRefundRequest Request body to create a subscription refund.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsCreateRefund(x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreateRefund(x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreateRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, CreateSubscriptionRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new subscription.
     * @summary Create Subscription
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateSubscriptionRequest} CreateSubscriptionRequest Request body to create a subscription.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsCreateSubscription(x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreateSubscription(x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsCreateSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsCreateSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, CreateSubscriptionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch plan details.
     * @summary Fetch Plan
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} plan_id Provide the PlanId for which the details have to be fetched.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsFetchPlan(x_api_version, plan_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchPlan(x_api_version, plan_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsFetchPlanWithConfiguration(cashfreeConfiguration, x_api_version, plan_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchPlanWithConfiguration(cashfreeConfiguration, x_api_version, plan_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch subscription details.
     * @summary Fetch Subscription
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsFetchSubscription(x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscription(x_api_version, subscription_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsFetchSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch details of a single payment of a subscription.
     * @summary Fetch details of a single payment.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {string} payment_id Provide the PaymentId using which the payment was created.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsFetchSubscriptionPayment(x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionPayment(x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsFetchSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch all payments of a subscription.
     * @summary Fetch details of all payments of a subscription.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsFetchSubscriptionPayments(x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionPayments(x_api_version, subscription_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsFetchSubscriptionPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionPaymentsWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch details of a refund of a subscription payment.
     * @summary Fetch details of a refund.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {string} refund_id Provide the PaymentId for which the details have to be fetched.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsFetchSubscriptionRefund(x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionRefund(x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsFetchSubscriptionRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsFetchSubscriptionRefundWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to manage a subscription. You can cancel, pause, activate or change the plan of a subscription.
     * @summary Manage a subscription.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {ManageSubscriptionRequest} ManageSubscriptionRequest Request body to manage a subscription.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsManageSubscription(x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsManageSubscription(x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsManageSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsManageSubscriptionWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, ManageSubscriptionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to manage a payment of a subscription. A payment can be cancelled or retried with this API.
     * @summary Manage a single payment.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} subscription_id Provide the SubscriptionId using which the subscription was created.
     * @param {string} payment_id Provide the PaymentId using which the payment was created.
     * @param {ManageSubscriptionPaymentRequest} ManageSubscriptionPaymentRequest Request body to manage a subscription payment.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubsManageSubscriptionPayment(x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsManageSubscriptionPayment(x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubsManageSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subsManageSubscriptionPaymentWithConfiguration(cashfreeConfiguration, x_api_version, subscription_id, payment_id, ManageSubscriptionPaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to upload file for Physical Nach Authorization.
     * @summary API to upload file for Physical Nach Authorization.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} payment_id Provide the PaymentId using which the payment was created.
     * @param {File} file Select the .jpg file that should be uploaded or provide the path of that file. You cannot upload a file that is more than 1MB in size.
     * @param {string} payment_id2 Authorization Payment Id for physical nach authorization
     * @param {string} action Action to be performed on the file. Can be SUBMIT_DOCUMENT
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubscriptionDocumentUpload(x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subscriptionDocumentUpload(x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubscriptionDocumentUploadWithConfiguration(cashfreeConfiguration, x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subscriptionDocumentUploadWithConfiguration(cashfreeConfiguration, x_api_version, payment_id, file, payment_id2, action, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to check if a payment method is enabled for your account.
     * @summary API to get all the payment method details available for subscription payments.
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {SubscriptionEligibilityRequest} SubscriptionEligibilityRequest Request body to fetch subscription eligibile payment method details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    static SubscriptionEligibility(x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subscriptionEligibility(x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static SubscriptionEligibilityWithConfiguration(cashfreeConfiguration, x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return SubscriptionApiFp().subscriptionEligibilityWithConfiguration(cashfreeConfiguration, x_api_version, SubscriptionEligibilityRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to delete a saved card instrument for a customer_id and instrument_id
     * @summary Delete Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id which needs to be deleted
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCustomerDeleteInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerDeleteInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
     * @summary Fetch Specific Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCustomerFetchInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstrumentWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch saved cards for a customer_id
     * @summary Fetch All Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCustomerFetchInstrumentsWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstrumentsWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
     * @summary Fetch cryptogram for a saved card instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    // With Configuration
    static PGCustomerInstrumentsFetchCryptogramWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.3.10");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerInstrumentsFetchCryptogramWithConfiguration(cashfreeConfiguration, x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
}
Cashfree.XEnableErrorAnalytics = true;
Cashfree.XApiVersion = "2023-08-01";
Cashfree.Environment = new Environment();
